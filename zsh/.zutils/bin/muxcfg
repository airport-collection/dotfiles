#!/usr/bin/env zsh

source "$HOME/.zutils/lib/init.zsh"
source "$HOME/.zutils/lib/base.zsh"
source "$HOME/.zutils/lib/git.zsh"
source "$HOME/.zutils/lib/io.zsh"
source "$HOME/.zutils/lib/mode.zsh"
source "$HOME/.zutils/lib/shell.zsh"

function muxcfg::mirror_and_start() {
  local _muxproj_="$1"
  local _muxconfig_="$2"
  local _startcwd_="$3"
  if [[ -d "$GIT_WORKING_DIR_ROOT/$_muxproj_" ]]; then
    io::hl "Error: $GIT_WORKING_DIR_ROOT/$_muxproj_ exists!"
    mode::dryrun || return 1
  fi
  if [[ $DRYRUN == true ]]; then
    echo "sed -e \"s#\${SESSION}#$_muxproj_#\" -e \"s#\${ROOT}#$_startcwd_#\" \"$MUXDIR/project.yml.template\" > \"$_muxconfig_\""
    echo "$GIT_NEW_WORKDIR_CMD $GIT_REPO $GIT_WORKING_DIR_ROOT/$_muxproj_ $_muxproj_"
    echo "mux start \"$_muxproj_\""
  else
    sed -e "s#\${SESSION}#$_muxproj_#" -e "s#\${ROOT}#$_startcwd_#" "$MUXDIR/project.yml.template" > "$_muxconfig_"
    $GIT_NEW_WORKDIR_CMD "$GIT_REPO" "$GIT_WORKING_DIR_ROOT/$_muxproj_" "$_muxproj_"
    mux start "$_muxproj_"
  fi
}
function muxcfg::start() {
  return 0
  local -A _fn_options
  base::getopt ys:t:w:c:p: noconfirm,src:,dst:,cwd:,cmd:,proj: "$@"

  local _muxconfig_="$MUXDIR/${_fn_options[--proj]}.yml"
  START_CWD=${START_CWD//__MUXPROJ__/$_muxproj_}
  if [[] -e "$_muxconfig_" ]]; then
    io::yes_or_no "$_muxconfig_ exists, overwrite (y/n)? [n] "
    if [[ $? -eq 0 ]]; then
      echo "\n$_muxconfig_ will be overwritten."
      mirror_and_start "$_muxproj_" "$_muxconfig_" "$START_CWD"
    else
      sed -e "s#\${SESSION}#$_muxproj_#" "$MUXDIR/project.yml.template"
    fi
  else
    mirror_and_start "$_muxproj_" "$_muxconfig_" "$START_CWD"
  fi
}
function muxcfg::delete() {
  echo "delete"
  return 0
  local _muxproj_="$1"
  io::yes_or_no "Delete project $_muxproj_ (y/n)? [n] "
  if [[ $? -eq 0 && -e "$MUXDIR/$_muxproj_.yml" ]]; then
    run "mux delete $_muxproj_" "Deleting tmuxinator config $MUXDIR/$_muxproj_.yml"
    run "cd $GIT_REPO" "Chdir to $GIT_REPO"
    run "git branch -D $_muxproj_" "Deleting branch $_muxproj_"
    run "rm -rf $GIT_WORKING_DIR_ROOT/$_muxproj_" "Deleting directory $GIT_WORKING_DIR_ROOT/$_muxproj_"
    run "tmux kill-session -t $_muxproj_" "Killing tmux session $_muxproj_"
  else
    echo "No project named $_muxproj_ exists."
  fi
}
function muxcfg::git5wrapper() {
  git5 mirror $1 $2 --allow_existing_branch --branch=$3
}
function muxcfg::usage() {
  cat <<EOF
Usage: muxcfg [arguments] [command] [project]

Arguments:
  -h or --help          Print the usage information
  -n or --dryrun        Only print the command to be executed
  -s or --src           Source git repo directory
  -t or --dst           Destination git repo directory
  -v or --verbose       Print additional information
  -y or --noconfirm     Skip confirmation

Commands:
  start                 Create project repository, branch and config, start tmux session
  delete                Delete project repository, branch and config, kill tmux session
EOF
  return 1
}
function muxcfg::main() {
  setopt localoptions unset err_return
  local -A _fn_options
  local -a _fn_args
  base::exists -b tmuxinator
  base::exists -d "$HOME/.tmuxinator"
  base::getopt hys:t: help,noconfirm,src:,dst: "$@"
  io::vlog 2 "${(kv)_fn_options}"
  io::vlog 2 "${_fn_args}"

  if [[ ! (-z "${_fn_options[--help]}" && -z "${_fn_options[-h]}") ]]; then
    muxcfg::usage
  fi

  eval set -- "${_fn_args}"
  local _subcmd _project _git_new_workdir_cmd _cwd
  _subcmd="$1"
  _project="$2"

  if [[ -e "$HOME/.google" ]]; then
    _git_new_workdir_cmd="muxcfg::git5wrapper"
    _cwd=${_fn_options[--dst]}/${_project}/google3
  else
    _git_new_workdir_cmd="git::new_workdir"
    _cwd=${_fn_options[--dst]}/${_project}
  fi
  base::exists --sub "${_git_new_workdir_cmd}"

  io::vlog 1 "[muxcfg] Subcommand: ${_subcmd}"
  case "${_subcmd}" in
    start|delete )
      shell::eval muxcfg::${_subcmd} --src "${_fn_options[--src]}" --dst "${_fn_options[--dst]}" --project "${_project}" --cmd "${_git_new_workdir_cmd}" --cwd "${_cwd}"
      ;;
    * )
      muxcfg::usage
  esac
  return 0
}
muxcfg::main "$@"
# vim: filetype=zsh sw=2 ts=2 sts=2 et tw=80 foldlevel=0 nospell
