#!/usr/bin/env zsh

source "$HOME/.zutils/lib/init.zsh"
source "$HOME/.zutils/lib/base.zsh"
source "$HOME/.zutils/lib/git.zsh"
source "$HOME/.zutils/lib/io.zsh"
source "$HOME/.zutils/lib/mode.zsh"
source "$HOME/.zutils/lib/shell.zsh"

function muxcfg::start() {
  setopt localoptions unset err_return
  local -A _fn_options
  base::getopt ys:t:w:c:p: noconfirm,src:,dst:,cwd:,cmd:,proj: "$@"
  local _proj _cwd _cmd _src _dst _muxcfg
  [[ -z "${_fn_options[--proj]}" ]] || _proj="${_fn_options[--proj]}"
  [[ -z "${_fn_options[-p]}" ]] || _proj="${_fn_options[-p]}"
  [[ -z "${_fn_options[--src]}" ]] || _src="${_fn_options[--src]}"
  [[ -z "${_fn_options[-s]}" ]] || _src="${_fn_options[-s]}"
  [[ -z "${_fn_options[--dst]}" ]] || _dst="${_fn_options[--dst]}"
  [[ -z "${_fn_options[-t]}" ]] || _dst="${_fn_options[-t]}"
  [[ -z "${_fn_options[--cwd]}" ]] || _cwd="${_fn_options[--cwd]}"
  [[ -z "${_fn_options[-w]}" ]] || _cwd="${_fn_options[-w]}"
  [[ -z "${_fn_options[--cmd]}" ]] || _cmd="${_fn_options[--cmd]}"
  [[ -z "${_fn_options[-c]}" ]] || _cmd="${_fn_options[-c]}"

  local _muxcfg="$HOME/.tmuxinator/${_proj}.yml"
  if [[ -e "$_muxcfg" && \
    (-z ${_fn_options[--noconfirm]} && -z ${_fn_options[-y]}) ]]; then
    if io::yes_or_no "$_muxcfg exists, overwrite"; then
      io::warn "$_muxcfg will be overwritten."
    else
      return 1
    fi
  fi

  if base::exists -d "${_dst}"; then
    io::hl "[muxcfg]: Directory ${_dst} exists!"
    mode::dryrun || return 1
  fi
  shell::eval "sed -e s#\${SESSION}#${_proj}# -e s#\${ROOT}#${_cwd}# $HOME/.tmuxinator/project.yml.template > ${_muxcfg}"
  shell::eval "${_cmd} ${_src} ${_dst} ${_proj}"
  shell::eval "mux start ${_proj}"
}
function muxcfg::delete() {
  setopt localoptions unset err_return
  local -A _fn_options
  base::getopt ys:t:w:c:p: noconfirm,src:,dst:,cwd:,cmd:,proj: "$@"
  local _proj _cwd _cmd _src _dst _muxcfg
  [[ -z "${_fn_options[--proj]}" ]] || _proj="${_fn_options[--proj]}"
  [[ -z "${_fn_options[-p]}" ]] || _proj="${_fn_options[-p]}"
  [[ -z "${_fn_options[--src]}" ]] || _src="${_fn_options[--src]}"
  [[ -z "${_fn_options[-s]}" ]] || _src="${_fn_options[-s]}"
  [[ -z "${_fn_options[--dst]}" ]] || _dst="${_fn_options[--dst]}"
  [[ -z "${_fn_options[-t]}" ]] || _dst="${_fn_options[-t]}"
  [[ -z "${_fn_options[--cwd]}" ]] || _cwd="${_fn_options[--cwd]}"
  [[ -z "${_fn_options[-w]}" ]] || _cwd="${_fn_options[-w]}"
  [[ -z "${_fn_options[--cmd]}" ]] || _cmd="${_fn_options[--cmd]}"
  [[ -z "${_fn_options[-c]}" ]] || _cmd="${_fn_options[-c]}"

  if [[ (-z ${_fn_options[--noconfirm]} && -z ${_fn_options[-y]}) ]]; then
    io::yes_or_no "Delete project ${_proj}"
  fi

  if [[ -e "$HOME/.tmuxinator/${_proj}.yml" ]]; then
    io::vlog 1 "Deleting tmuxinator config $HOME/.tmuxinator/${_proj}.yml"
    shell::eval "mux delete ${_proj}"
    cd ${_src}
    io::vlog 1 "Deleting branch ${_proj}"
    shell::eval "git branch -D ${_proj}"
    io::vlog 1 "Deleting directory ${_dst}"
    shell::eval "rm -rf ${_dst}"
    io::vlog 1 "Killing tmux session ${_proj}"
    shell::eval "tmux kill-session -t ${_proj}"
  else
    io::err "No project named ${_proj} exists."
  fi
}
function muxcfg::git5wrapper() {
  git5 mirror $1 $2 --allow_existing_branch --branch=$3
}
function muxcfg::usage() {
  cat <<EOF
Usage: muxcfg [arguments] [command] [project]

Arguments:
  -h or --help          Print the usage information
  -s or --src           Source git repo directory
  -t or --dst           Destination git repo directory
  -y or --noconfirm     Skip confirmation

Commands:
  start                 Create project repository, branch and config, start tmux session
  delete                Delete project repository, branch and config, kill tmux session
EOF
  return 1
}
function muxcfg::main() {
  setopt localoptions unset err_return
  local -A _fn_options
  local -a _fn_args
  base::exists -b tmuxinator
  base::exists -d "$HOME/.tmuxinator"
  base::getopt hys:t: help,noconfirm,src:,dst: "$@"
  io::vlog 2 "${(kv)_fn_options}"
  io::vlog 2 "${_fn_args}"

  if [[ ! (-z "${_fn_options[--help]}" && -z "${_fn_options[-h]}") ]]; then
    muxcfg::usage
  fi

  eval set -- "${_fn_args}"
  local _subcmd _project _git_new_workdir_cmd _cwd
  _subcmd="$1"
  _project="$2"

  if [[ -e "$HOME/.google" ]]; then
    _git_new_workdir_cmd="muxcfg::git5wrapper"
    _cwd=${_fn_options[--dst]}/${_project}/google3
  else
    _git_new_workdir_cmd="git::new_workdir"
    _cwd=${_fn_options[--dst]}/${_project}
  fi
  base::exists --sub "${_git_new_workdir_cmd}"

  io::vlog 1 "[muxcfg] Subcommand: ${_subcmd}"
  case "${_subcmd}" in
    start|delete )
      if [[ ! (-z ${_fn_options[--noconfirm]} && -z ${_fn_options[-y]}) ]]; then
        muxcfg::${_subcmd} --src "${_fn_options[--src]}" --dst "${_fn_options[--dst]}" --proj "${_project}" --cmd "${_git_new_workdir_cmd}" --cwd "${_cwd}" -y
      else
        muxcfg::${_subcmd} --src "${_fn_options[--src]}" --dst "${_fn_options[--dst]}" --proj "${_project}" --cmd "${_git_new_workdir_cmd}" --cwd "${_cwd}"
      fi
      ;;
    * )
      muxcfg::usage
      ;;
  esac
  return 0
}
muxcfg::main "$@"
# vim: filetype=zsh sw=2 ts=2 sts=2 et tw=80 foldlevel=0 nospell
