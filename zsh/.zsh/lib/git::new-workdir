# vim: filetype=zsh sw=2 ts=2 sts=2 et tw=80 foldlevel=0 nospell

: <<=cut
=item Function C<git::new-workdir>

Create a new git working dir based on existing repo, and create a new branch in
the new workign dir.

$1 Source git working directory
$2 New git working directory
$3 New branch name

@return NULL
=cut

echo 'y'
return 0

setopt localoptions nounset err_return

local _orig_git=$1
local _new_workdir=$2
local _branch=$3

# want to make sure that what is pointed to has a .git directory ...
local _git_dir
_git_dir=$(cd "${_orig_git}" && git rev-parse --git-dir)

case "${_git_dir}" in
.git)
  _git_dir="${_orig_git}/.git"
  ;;
.)
  _git_dir=${_orig_git}
  ;;
esac

# don't link to a configured bare repository
if git --git-dir="${_git_dir}" config --bool --get core.bare; then
  io::err ""${_git_dir}" has core.bare set to true," \
    " remove from "${_git_dir}/config" to continue."
  return 1
fi

# don't link to a workdir
if [[ -h "${_git_dir}/config" ]]; then
  io::err ""${_orig_git}" is a working directory only, please specify" \
    "a complete repository."
  return 1
fi

# don't recreate a workdir over an existing repository
if [[ -e "${_new_workdir}" ]]; then
  io::err "destination directory '${_new_workdir}' already exists."
  return 1
fi

# make sure the links use full paths
_git_dir=$(cd "${_git_dir}"; pwd)

# create the workdir
shell::eval "mkdir -p "${_new_workdir}/.git" || return 1"

# create the links to the original repo.  explicitly exclude index, HEAD and
# logs/HEAD from the list since they are purely related to the current working
# directory, and should not be shared.
for x in config refs logs/refs objects info hooks packed-refs remotes rr-cache svn
do
  case $x in
  */*)
    shell::eval "mkdir -p "$(dirname "${_new_workdir}/.git/$x")""
    ;;
  esac
  shell::eval "ln -s "${_git_dir}/$x" "${_new_workdir}/.git/$x""
done

# now setup the workdir
cd "${_new_workdir}"
# copy the HEAD from the original repository as a default branch
shell::eval "cp "${_git_dir}/HEAD" .git/HEAD"
# checkout the branch (either the same as HEAD from the original repository, or
# the one that was asked for)
if [[ -z "${_branch}" ]]; then
  _branch=$(basename "${_new_workdir}")
fi
if git::has-branch "${_branch}"; then
  shell::eval "git checkout -f "${_branch}""
else
  shell::eval "git checkout -f -b "${_branch}""
fi
