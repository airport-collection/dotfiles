#!/usr/bin/env zsh

function muxcfg::new-workdir-cmd() {
  if [[ -n ${__GOOGLE__+1} ]]; then
    echo "muxcfg::git5wrapper"
  else
    echo "git::new-workdir"
  fi
}
function muxcfg::usage() {
  cat <<EOF
Usage: muxcfg [arguments] [command] [project]

Arguments:
  -h or --help          Print the usage information
  -s or --src           Source git repo directory
  -t or --dst           Destination git repo directory
  -y or --noconfirm     Skip confirmation
  -v or --verbose       Verbose
  -n or --dryrun        Dryrun

Commands:
  start                 Create project repository, branch and config, start tmux session
  delete                Delete project repository, branch and config, kill tmux session
EOF
  exit 1
}
function muxcfg::start() {
  setopt localoptions nounset err_return

  zparseopts -A localopts -cwd: -proj: "$@"
  local _proj _cwd _src _dst _muxcfg _tmpcfg
  [[ -n "${localopts[--proj]+1}" ]] && _proj="${localopts[--proj]}"
  [[ -n ${opts[--src]+1} ]] && _src="${opts[--src]}"
  [[ -n ${opts[--dst]+1} ]] && _dst="${opts[--dst]}/${_proj}"
  [[ -n "${localopts[--cwd]+1}" ]] && _cwd="${localopts[--cwd]}"

  local _muxcfg="$MUXCFGDIR/${_proj}.yml"
  if [[ -e "$_muxcfg" && ! -n ${opts[--noconfirm]+1} ]]; then
    if io::yes_or_no "$_muxcfg exists, overwrite"; then
      io::warn "$_muxcfg will be overwritten."
      _tmpcfg=$(mktemp)
      shell::eval "sed -e \"s#\\\${SESSION}#${_proj}#\" -e \"s#\\\${ROOT}#${_cwd}#\" $MUXCFGDIR/project.yml.template > ${_tmpcfg}"
      shell::eval "vimdiff $MUXCFGDIR/${_proj}.yml ${_tmpcfg}"
      io::yes_or_no "Continue"
      shell::eval "mv ${_tmpcfg} $MUXCFGDIR/${_proj}.yml"
    else
      return 1
    fi
  else
    shell::eval "sed -e \"s#\\\${SESSION}#${_proj}#\" -e \"s#\\\${ROOT}#${_cwd}#\" $MUXCFGDIR/project.yml.template > ${_muxcfg}"
  fi

  if [[ -d "${_dst}" ]]; then
    io::hl "[muxcfg] Directory ${_dst} exists."
    io::yes_or_no "Skip branching and start with existing copy"
  else
    shell::eval "whence -f $(muxcfg::new-workdir-cmd) > /dev/null"
    shell::eval "$(muxcfg::new-workdir-cmd) ${_src} ${_dst} ${_proj}"
  fi
  shell::eval "mux start ${_proj}"
}
function muxcfg::delete() {
  setopt localoptions nounset err_return
  zparseopts -A localopts -cwd: -proj: "$@"
  local _proj _cwd _src _dst _muxcfg
  [[ -n "${localopts[--proj]+1}" ]] && _proj="${localopts[--proj]}"
  [[ -n ${opts[--src]+1} ]] && _src="${opts[--src]}"
  [[ -n ${opts[--dst]+1} ]] && _dst="${opts[--dst]}"
  [[ -n "${localopts[--cwd]+1}" ]] && _cwd="${localopts[--cwd]}"

  if [[ ! -n ${opts[--noconfirm]+1} ]]; then
    io::yes_or_no "Delete project ${_proj}"
  fi

  if [[ -e "$MUXCFGDIR/${_proj}.yml" ]]; then
    io::vlog 1 "Deleting tmuxinator config $MUXCFGDIR/${_proj}.yml"
    shell::eval "mux delete ${_proj}"
    cd "${_src}" || return 1
    io::vlog 1 "Deleting branch ${_proj}"
    shell::eval "git branch -D ${_proj}"
    io::vlog 1 "Deleting directory ${_dst}"
    shell::eval "rm -rf ${_dst}"
    io::vlog 1 "Killing tmux session ${_proj}"
    shell::eval "tmux kill-session -t ${_proj}"
  else
    io::err "No project named ${_proj} exists."
  fi
}
function muxcfg::git5wrapper() {
  setopt localoptions err_return
  shell::eval "git5 mirror $1 $2 --allow_existing_branch --branch=$3"
}
function muxcfg::main() {
  setopt localoptions nounset err_return

  shell::eval "whence tmuxinator > /dev/null"
  shell::eval "mkdir -p "$MUXCFGDIR""
  io::vlog 2 "${(kv)opts}"

  local _subcmd _project _git_new_workdir_cmd _cwd
  _subcmd="$1"
  _project="$2"

  if [[ -n ${__GOOGLE__+1} ]]; then
    _cwd=${opts[--dst]}/${_project}/google3
  else
    _cwd=${opts[--dst]}/${_project}
  fi

  io::vlog 1 "[muxcfg] Subcommand: ${_subcmd}"
  case "${_subcmd}" in
    start|delete )
      "muxcfg::${_subcmd}" --proj "${_project}" --cwd "${_cwd}"
      ;;
    * )
      muxcfg::usage
      ;;
  esac
  return 0
}

local _config_dir
_config_dir="${0:A:h}/../../"
fpath=(${_config_dir:a}/.zsh/lib ${_config_dir:a}/.zsh/functions $fpath)
autoload -Uz -- ${_config_dir:a}/.zsh/lib/[^_]*(:t)
autoload -Uz -- ${_config_dir:a}/.zsh/functions/[^_]*(:t)

setopt LOCAL_OPTIONS
setopt localoptions err_return

declare -Ag opts
zparseopts -D -A opts h n v y -help -dryrun -verbose -src: -dst: -noconfirm "$@"

[[ -n ${opts[--help]+1} || -n ${opts[-h]+1} ]] && muxcfg::usage
[[ -n ${opts[--dryrun]+1} || -n ${opts[-n]+1} ]] && mode::set-dryrun
[[ -n ${opts[--verbose]+1} || -n ${opts[-v]+1} ]] && setopt localoptions verbose

MUXCFGDIR="$HOME/.tmuxinator"
muxcfg::main "$@"

# vim: filetype=zsh sw=2 ts=2 sts=2 et tw=80 foldlevel=0 nospell
