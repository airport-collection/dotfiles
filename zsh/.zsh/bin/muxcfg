#!/usr/bin/env zsh
#
source "$HOME/.zsh/lib/base.zsh"
source "$HOME/.zsh/lib/git.zsh"
source "$HOME/.zsh/lib/io.zsh"
source "$HOME/.zsh/lib/mode.zsh"
source "$HOME/.zsh/lib/shell.zsh"

function muxcfg::start() {
  setopt localoptions unset err_return
  zparseopts -A opts -noconfirm -src: -dst: -cwd: -cmd: -proj: "$@"
  local _proj _cwd _cmd _src _dst _muxcfg
  [[ -n "${opts[--proj]+1}" ]] && _proj="${opts[--proj]}"
  [[ -n "${opts[--src]+1}" ]] && _src="${opts[--src]}"
  [[ -n "${opts[--dst]+1}" ]] && _dst="${opts[--dst]}"
  [[ -n "${opts[--cwd]+1}" ]] && _cwd="${opts[--cwd]}"
  [[ -n "${opts[--cmd]+1}" ]] && _cmd="${opts[--cmd]}"

  local _muxcfg="$MUXCFGDIR/${_proj}.yml"
  if [[ -e "$_muxcfg" && ! -n ${opts[--noconfirm]+1} ]]; then
    if io::yes_or_no "$_muxcfg exists, overwrite"; then
      io::warn "$_muxcfg will be overwritten."
    else
      return 1
    fi
  fi

  if [[ -d "${_dst}" ]]; then
    io::hl "[muxcfg]: Directory ${_dst} exists!"
    mode::dryrun || return 1
  fi
  shell::eval "sed -e s#\${SESSION}#${_proj}# -e s#\${ROOT}#${_cwd}# $MUXCFGDIR/project.yml.template > ${_muxcfg}"
  shell::eval "${_cmd} ${_src} ${_dst} ${_proj}"
  shell::eval "mux start ${_proj}"
}
function muxcfg::delete() {
  setopt localoptions unset err_return
  zparseopts -A opts -noconfirm -src: -dst: -cwd: -cmd: -proj: "$@"
  local _proj _cwd _cmd _src _dst _muxcfg
  [[ -n "${opts[--proj]+1}" ]] && _proj="${opts[--proj]}"
  [[ -n "${opts[--src]+1}" ]] && _src="${opts[--src]}"
  [[ -n "${opts[--dst]+1}" ]] && _dst="${opts[--dst]}"
  [[ -n "${opts[--cwd]+1}" ]] && _cwd="${opts[--cwd]}"
  [[ -n "${opts[--cmd]+1}" ]] && _cmd="${opts[--cmd]}"

  if [[ ! -n ${opts[--noconfirm]+1} ]]; then
    io::yes_or_no "Delete project ${_proj}"
  fi

  if [[ -e "$MUXCFGDIR/${_proj}.yml" ]]; then
    io::vlog 1 "Deleting tmuxinator config $MUXCFGDIR/${_proj}.yml"
    shell::eval "mux delete ${_proj}"
    cd "${_src}" || return 1
    io::vlog 1 "Deleting branch ${_proj}"
    shell::eval "git branch -D ${_proj}"
    io::vlog 1 "Deleting directory ${_dst}"
    shell::eval "rm -rf ${_dst}"
    io::vlog 1 "Killing tmux session ${_proj}"
    shell::eval "tmux kill-session -t ${_proj}"
  else
    io::err "No project named ${_proj} exists."
  fi
}
function muxcfg::git5wrapper() {
  setopt localoptions err_return
  zparseopts -D -A opts -src: -dst: -branch:
  shell::eval "git5 mirror ${opts[--src]} ${opts[--dst]} --allow_existing_branch --branch=${opts[--branch]}"
}
function muxcfg::usage() {
  cat <<EOF
Usage: muxcfg [arguments] [command] [project]

Arguments:
  --help          Print the usage information
  --src           Source git repo directory
  --dst           Destination git repo directory
  --noconfirm     Skip confirmation

Commands:
  start                 Create project repository, branch and config, start tmux session
  delete                Delete project repository, branch and config, kill tmux session
EOF
  exit 1
}
function muxcfg::main() {
  setopt localoptions unset err_return
  whence tmuxinator > /dev/null
  shell::eval "mkdir -p \"$MUXCFGDIR\""
  zparseopts -D -A opts -help -noconfirm -src: -dst: "$@"
  io::vlog 2 "${(kv)opts}"

  [[ -n ${opts[--help]+1} ]] && muxcfg::usage

  local _subcmd _project _git_new_workdir_cmd _cwd
  _subcmd="$1"
  _project="$2"

  if [[ -e "$HOME/.google" ]]; then
    _git_new_workdir_cmd="muxcfg::git5wrapper"
    _cwd=${opts[--dst]}/${_project}/google3
  else
    _git_new_workdir_cmd="git::new_workdir"
    _cwd=${opts[--dst]}/${_project}
  fi
  whence -f "${_git_new_workdir_cmd}" > /dev/null

  io::vlog 1 "[muxcfg] Subcommand: ${_subcmd}"
  case "${_subcmd}" in
    start|delete )
      if [[ -n ${opts[--noconfirm]} ]]; then
        "muxcfg::${_subcmd}" --src "${opts[--src]}" --dst "${opts[--dst]}" --proj "${_project}" --cmd "${_git_new_workdir_cmd}" --cwd "${_cwd}" --noconfirm
      else
        "muxcfg::${_subcmd}" --src "${opts[--src]}" --dst "${opts[--dst]}" --proj "${_project}" --cmd "${_git_new_workdir_cmd}" --cwd "${_cwd}"
      fi
      ;;
    * )
      muxcfg::usage
      ;;
  esac
  return 0
}

MUXCFGDIR="$HOME/.tmuxinator"
muxcfg::main "$@"

# vim: filetype=zsh sw=2 ts=2 sts=2 et tw=80 foldlevel=0 nospell
