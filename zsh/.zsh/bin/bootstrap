#!/usr/bin/env zsh

function bootstrap::usage() {
  cat <<EOF
Usage: bootstrap [arguments]

Arguments:
  -h or --help          Print the usage information
  -n or --dryrun        Dryrun
  -u or --unstow        Revert the stow symlinks
  -s or --stow          Stow only
  -v or --verbose       Verbose
EOF
  exit 0
}
function bootstrap::stow() {
  for module in misc tmux vim zsh; do
    [[ -d ${module} ]] && zsh::eval "stow -v ${_stow_opts} ${module} -t ~"
  done
  os::OSX && [[ -d osx ]] && zsh::eval "stow -v ${_stow_opts} osx -t ~"
}
function bootstrap::main() {
  setopt localoptions unset err_return

  if [[ "$OSTYPE" == 'darwin'* ]]; then
    declare -xg BREWVERSION='homebrew'
    declare -xg BREWHOME="$HOME/.$BREWVERSION"
  else
    declare -xg BREWVERSION='linuxbrew'
    declare -xg BREWHOME="$HOME/.$BREWVERSION"
  fi
  path=($BREWHOME/bin $BREWHOME/sbin $BREWHOME/opt/go/libexec/bin $path)

  zsh::eval 'sudo -v'
  io::msg "Installing ${BREWVERSION} dependencies..."
  os::LINUX && zsh::eval "sudo apt-get install build-essential curl git m4 \
    ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev \
    zlib1g-dev clipit xclip x11-xkb-utils xbindkeys xbindkeys-config \
    xvkbd git-annex xautomation urlview xdotool x11-apps libcairo2-dev \
    terminator kupfer"
  # For xkb-data, symbol altwin need to be patched to fix the error where win
  # key is not correctly mapped, if the xkb-data version is too old.

  if mode::dryrun || [[ ! -d "${BREWHOME}" ]]; then
    io::msg "Cloning ${BREWVERSION}..."
    zsh::eval "git clone "https://github.com/Homebrew/${BREWVERSION}" \
      "${BREWHOME}""
  fi

  # brew tap / search etc sometimes complains about Non-HTTP proxy URI.
  # This is because of an issue with the ruby open-uri library. The workaround
  # is to set https_proxy to http_proxy (`export https_proxy=$http_proxy`).
  io::msg 'Tapping extra repositories...'
  zsh::eval 'brew tap paulhybryant/myformulae'
  zsh::eval 'brew tap homebrew/x11'
  zsh::eval 'brew tap homebrew/dupes'
  zsh::eval 'brew tap homebrew/completions'
  zsh::eval 'brew tap iveney/mocha'
  zsh::eval 'brew tap beeftornado/rmtree'
  zsh::eval 'brew tap peco/peco'

  # Install neobundle before stow so it won
  io::msg 'Installing NeoBundle...'
  if mode::dryrun || [[ ! -d ~/.vim/bundle/neobundle.vim ]]; then
    # Another way to wrap long string is to use variable v, e.g.
    # v='str1'; v+='str2'; cmd $v
    zsh::eval "source <(curl -sL https://raw.githubusercontent.com/Shougo/`
      `neobundle.vim/master/bin/install.sh)"
    zsh::eval '~/.vim/bundle/neobundle.vim/bin/neoinstall vimproc.vim neobundle-vim-recipes'
  fi

  zsh::eval 'brew install coreutils stow findutils'
  io::msg 'Creating symlinks with stow...'
  zsh::eval 'mkdir -p ~/.antigen/repos/'
  zsh::eval 'mkdir -p ~/.config/pip/'
  zsh::eval 'mkdir -p ~/.config/ranger/'
  zsh::eval 'mkdir -p ~/.config/terminator/'
  zsh::eval 'mkdir -p ~/.ssh/assh.d'
  zsh::eval 'mkdir -p ~/.tmux/plugins'
  zsh::eval 'mkdir -p ~/.tmuxinator'
  zsh::eval 'mkdir -p ~/.vim/bundle'
  bootstrap::stow
  zsh::eval 'ln -sf ~/.xbindkeysrc.viminsert.scm ~/.xbindkeysrc.scm'
  if os::LINUX; then
    zsh::eval 'command rm ~/.ssh/assh.d/gmac.yml'
  else
    zsh::eval 'command rm ~/.ssh/assh.d/yuhuang.bej.yml'
  fi
  pushd ~/.ssh/
  zsh::eval "assh build > config"
  popd

  io::msg 'Installing softwares...'
  if os::LINUX; then
    zsh::eval 'brew install python --with-unicode-ucs4'
  fi
  zsh::eval 'brew install --HEAD paulhybryant/myformulae/powerline-shell'
  zsh::eval 'brew install --with-gssapi --with-libssh2 --with-rtmpdump curl'
  zsh::eval "brew install https://raw.githubusercontent.com/moul/`
    `advanced-ssh-config/master/contrib/homebrew/assh.rb"
  zsh::eval "brew install brew-gem cmake ctags git htop python3 tmux npm \
    the_silver_searcher vimpager zsh netcat dos2unix most stdman ranger fasd \
    makeself brew-rmtree git-extras fzf peco grc markdown xbindkeys \
    zsh-completions gnu-sed "
  # zsh::eval 'brew install --force pt'
  zsh::eval 'brew install --HEAD vimdoc vroom'
  zsh::eval "pip install --upgrade powerline-status neovim \
    bz2file percol butterfly"
  if os::LINUX; then
    # zsh::eval "brew install --disable-nls --override-system-vi \
      # --with-client-server --with-lua --with-luajit --with-gtk+ vim"
    zsh::eval 'brew install --HEAD trash-cli'
  fi
  zsh::eval 'brew gem install tmuxinator'
  # zsh::eval 'brew gem install automux'
  zsh::eval "http_proxy='' https_proxy='' \
    npm install -g urchin npm-update-outdated shelljs js-beautify"

  if os::OSX; then
    io::msg 'Installing extra stuff for OSX...'
    zsh::eval 'brew tap caskroom/versions'
    zsh::eval "brew install --with-custom-icons --with-lua --with-luajit \
      --with-override-system-vim macvim"
    zsh::eval 'brew linkapps macvim'
    zsh::eval "brew install brew-cask clipper osxutils lsof \
      paulhybryant/myformulae/gnu-getopt yank textql"
    zsh::eval "brew install reattach-to-user-namespace \
      --with-wrap-launchctl --with-wrap-pbcopy-and-pbpaste"
    zsh::eval 'brew install gnu-trash'
    zsh::eval "brew cask install karabiner seil spectacle \
      xquartz git-annex urlview"
    # zsh::eval './osx/.osx/init.zsh'
  fi

  io::msg 'Bootstrap done!'
  io::msg 'Reinitialize zsh...'
}

setopt LOCAL_OPTIONS
setopt localoptions err_return

local -a help dryrun unstow stow verbose
zparseopts -D -K -M -E -- h=help n=dryrun u=unstow s=stow v=verbose \
  -help=help -dryrun=dryrun -unstow=unstow -stow=stow -verbose=verbose -log:=log

local _config_dir _logfile
local -a _stow_opts
_config_dir="${0:A:h}/../../../"

fpath=(${_config_dir:a}/zsh/.zsh/lib $fpath)
autoload -Uz -- ${_config_dir:a}/zsh/.zsh/lib/[^_]*(:t)

[[ -n ${help} ]] && bootstrap::usage
[[ -n ${dryrun} ]] && mode::set-dryrun
[[ -n ${verbose} ]] && setopt localoptions verbose
if [[ ${#log} -ge 2 ]]; then
  _logfile=${log[2]}
else
  _logfile=$(mktemp)
fi

zsh::eval "pushd ${_config_dir:a}"
if [[ -n ${unstow} ]]; then
  _stow_opts+=(-D)
  bootstrap::stow | tee ${_logfile}
  io::msg "Install log: ${_logfile}"
elif [[ -n ${stow} ]]; then
  bootstrap::stow | tee ${_logfile}
  io::msg "Install log: ${_logfile}"
else
  bootstrap::main | tee ${_logfile}
  io::msg "Install log: ${_logfile}"
  zsh::eval 'exec zsh'
fi
zsh::eval 'popd'

# vim: filetype=zsh sw=2 ts=2 sts=2 et tw=80 foldlevel=0 nospell
