#!/usr/bin/env zsh

function bootstrap::usage() {
  cat <<EOF
Usage: bootstrap [arguments]

Arguments:
  -h or --help          Print the usage information
  -n or --dryrun        Dryrun
  -u or --unstow        Revert the stow symlinks
  -s or --stow          Stow only
  -v or --verbose       Verbose
EOF
  exit 0
}
function bootstrap::stow() {
  for module in misc tmux vim zsh; do
    [[ -d ${module} ]] && stow -v "$@" ${module} -t ~
  done
  os::OSX && [[ -d osx ]] && stow -v "$@" osx -t ~
}
function bootstrap::main() {
  setopt localoptions unset err_return

  io::msg "Installing ${BREWVERSION} dependencies..."
  os::LINUX && shell::eval "sudo apt-get install build-essential curl git m4 \
    ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev \
    zlib1g-dev trash-cli clipit xclip x11-xkb-utils xbindkeys xbindkeys-config \
    xvkbd"

  if [[ ! -d "${BREWHOME}" ]]; then
    io::msg "Cloning ${BREWVERSION}..."
    shell::eval "git clone "https://github.com/Homebrew/${BREWVERSION}" \
      "${BREWHOME}""
  fi

  # shell::eval "brew update && brew upgrade $(brew outdated)"
  shell::eval "brew install coreutils stow"
  io::msg "Creating symlinks with stow..."
  shell::eval "mkdir -p "$HOME/.antigen/repos/""
  shell::eval "mkdir -p "$HOME/.configs/pip/""
  shell::eval "mkdir -p "$HOME/.configs/terminator/""
  shell::eval "mkdir -p "$HOME/.ssh/""
  shell::eval "mkdir -p "$HOME/.tmux/plugins""
  shell::eval "mkdir -p "$HOME/.tmuxinator""
  shell::eval "mkdir -p "$HOME/.vim/""
  shell::eval "[[ ! -d ~/.nvim ]] && ln -s $HOME/.vim $HOME/.nvim"
  bootstrap::stow

  io::msg "Tapping extra repositories..."
  shell::eval "brew tap paulhybryant/myformulae"
  shell::eval "brew tap homebrew/x11"
  shell::eval "brew tap homebrew/dupes"
  shell::eval "brew tap homebrew/completions"
  shell::eval "brew tap iveney/mocha"

  io::msg "Installing softwares..."
  shell::eval "brew install --HEAD paulhybryant/myformulae/powerline-shell \
    paulhybryant/myformulae/zsh-completions"
  shell::eval "brew install --with-gssapi --with-libssh2 --with-rtmpdump curl"
  os::LINUX && shell::eval "brew install --disable-nls --override-system-vi \
    --with-client-server --with-lua --with-luajit --with-gtk+ vim"
  os::OSX && shell::eval "brew install --disable-nls --override-system-vi \
    --with-client-server --with-lua --with-luajit vim"
  shell::eval "brew install brew-gem cmake ctags git htop python python3 \
    the_silver_searcher tmux vimpager zsh netcat dos2unix most stdman assh fasd"
  shell::eval "pip install powerline-status advanced-ssh-config neovim \
    terminatorcli bz2file"
  shell::eval "brew gem install tmuxinator automux pypy pypy3"
  shell::eval "brew install --HEAD vimdoc vroom"
  shell::eval "brew install npm"
  shell::eval "npm install -g urchin npm-update-outdated"

  os::OSX && io::msg "Installing extra stuff for OSX..." && \
    shell::eval "brew install brew-cask clipper macvim osxutils lsof \
    reattach-to-user-namespace paulhybryant/myformulae/gnu-getopt"
  os::OSX && shell::eval "brew install --force trash"
  os::OSX && shell::eval "brew link --overwrite trash"
  io::msg "Bootstrap done!"
}

setopt LOCAL_OPTIONS
setopt localoptions err_return

zparseopts -A opts h n u s v -help -dryrun -unstow -stow -verbose "$@"

local _config_dir _stow_opts
_config_dir="${0:A:h}/../../"
# source ${_config_dir:a}/.zshenv
fpath=(${_config_dir:a}/.zsh/lib ${_config_dir:a}/.zsh/functions $fpath)
autoload -Uz -- ${_config_dir:a}/.zsh/lib/[^_]*(:t)
autoload -Uz -- ${_config_dir:a}/.zsh/functions/[^_]*(:t)

[[ -n ${opts[--help]+1} || -n ${opts[-h]+1} ]] && bootstrap::usage
[[ -n ${opts[--dryrun]+1} || -n ${opts[-n]+1} ]] && mode::set-dryrun && _stow_opts="-n"
[[ -n ${opts[--verbose]+1} || -n ${opts[-v]+1} ]] && setopt localoptions verbose

shell::eval "pushd ${_config_dir:a}"
if [[ -n ${opts[--unstow]+1} || -n ${opts[-u]+1} ]]; then
  bootstrap::stow ${_stow_opts} -D
elif [[ -n ${opts[--stow]+1} || -n ${opts[-s]+1} ]]; then
  bootstrap::stow ${_stow_opts}
else
  bootstrap::main
  shell::eval "source ${_config_dir:a}/.zshrc"
fi
shell::eval "popd"

# vim: filetype=zsh sw=2 ts=2 sts=2 et tw=80 foldlevel=0 nospell
