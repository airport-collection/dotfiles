#!/usr/bin/env zsh

function bootstrap::usage() {
  cat <<EOF
Usage: bootstrap [arguments]

Arguments:
  -h or --help          Print the usage information
  -n or --dryrun        Dryrun
  -u or --unstow        Revert the stow symlinks
  -s or --stow          Stow only
  -v or --verbose       Verbose
EOF
  exit 0
}
function bootstrap::stow() {
  for module in misc tmux vim zsh; do
    [[ -d ${module} ]] && stow -v "$@" ${module} -t ~
  done
  os::OSX && [[ -d osx ]] && stow -v "$@" osx -t ~
}
function bootstrap::main() {
  setopt localoptions unset err_return

  zsh::eval "sudo -v"
  io::msg "Installing ${BREWVERSION} dependencies..."
  os::LINUX && zsh::eval "sudo apt-get install build-essential curl git m4 \
    ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev libncurses-dev \
    zlib1g-dev clipit xclip x11-xkb-utils xbindkeys xbindkeys-config \
    xvkbd git-annex xautomation urlview xdotool x11-apps"

  if [[ ! -d "${BREWHOME}" ]]; then
    io::msg "Cloning ${BREWVERSION}..."
    zsh::eval "git clone "https://github.com/Homebrew/${BREWVERSION}" \
      "${BREWHOME}""
  fi

  # zsh::eval "brew update && brew upgrade $(brew outdated)"
  zsh::eval "brew install coreutils stow findutils"
  io::msg "Creating symlinks with stow..."
  zsh::eval "mkdir -p "$HOME/.antigen/repos/""
  zsh::eval "mkdir -p "$HOME/.config/pip/""
  zsh::eval "mkdir -p "$HOME/.config/ranger/""
  zsh::eval "mkdir -p "$HOME/.config/terminator/""
  zsh::eval "mkdir -p "$HOME/.ssh/""
  zsh::eval "mkdir -p "$HOME/.tmux/plugins""
  zsh::eval "mkdir -p "$HOME/.tmuxinator""
  zsh::eval "mkdir -p "$HOME/.vim/""
  bootstrap::stow
  zsh::eval "ln -sf $HOME/.xbindkeysrc.normal $HOME/.xbindkeysrc.scm"

  io::msg "Tapping extra repositories..."
  zsh::eval "brew tap paulhybryant/myformulae"
  zsh::eval "brew tap homebrew/x11"
  zsh::eval "brew tap homebrew/dupes"
  zsh::eval "brew tap homebrew/completions"
  zsh::eval "brew tap iveney/mocha"
  zsh::eval "brew tap beeftornado/rmtree"
  # zsh::eval "brew tap peco/peco"

  io::msg "Installing softwares..."
  # zsh::eval "brew install --HEAD paulhybryant/myformulae/powerline-shell"
  zsh::eval "brew install --with-gssapi --with-libssh2 --with-rtmpdump curl"
  zsh::eval "brew install brew-gem cmake ctags git htop python python3 tmux \
    the_silver_searcher vimpager zsh netcat dos2unix most stdman assh ranger \
    fasd makeself upx brew-rmtree ruby npm git-extras nmap fzf peco \
    zsh-completions xbindkeys markdown gnu-sed"
  zsh::eval "brew install --force pt"
  # pypy pypy3
  zsh::eval "brew install --HEAD vimdoc vroom"
  zsh::eval "pip install --upgrade powerline-status advanced-ssh-config \
    neovim terminatorcli bz2file percol butterfly libsass"
  if os::LINUX; then
    zsh::eval "brew install --disable-nls --override-system-vi \
      --with-client-server --with-lua --with-luajit --with-gtk+ vim"
    zsh::eval "brew install --HEAD trash-cli"
    zsh::eval "brew install terminator"
  fi
  zsh::eval "brew gem install tmuxinator automux"
  zsh::eval "http_proxy='' https_proxy='' \
    npm install -g urchin npm-update-outdated shelljs js-beautify"

  if os::OSX; then
    io::msg "Installing extra stuff for OSX..."
    zsh::eval "brew tap caskroom/versions"
    zsh::eval "brew install --with-custom-icons --with-lua --with-luajit \
      --with-override-system-vim macvim"
    zsh::eval "brew linkapps macvim"
    zsh::eval "brew install brew-cask clipper osxutils lsof \
      paulhybryant/myformulae/gnu-getopt"
    zsh::eval "brew install reattach-to-user-namespace \
      --with-wrap-launchctl --with-wrap-pbcopy-and-pbpaste"
    zsh::eval "brew install --force trash"
    zsh::eval "brew link --overwrite trash"
    zsh::eval "brew cask install karabiner seil spectacle \
      xquartz git-annex urlview"
    # zsh::eval "./osx/.osx/init.zsh"
  fi

  zsh::eval "source <(curl -sL https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh)"
  io::msg "Bootstrap done!"
}

setopt LOCAL_OPTIONS
setopt localoptions err_return

local -a help dryrun unstow stow verbose
zparseopts -D -K -M -E -- h=help n=dryrun u=unstow s=stow v=verbose \
  -help=help -dryrun=dryrun -unstow=unstow -stow=stow -verbose=verbose

local _config_dir _stow_opts
_config_dir="${0:A:h}/../../../"
if [[ -n ${dryrun} ]]; then
  printf "[Dryrun]   source ${_config_dir:a}/zsh/.zshenv\n"
elif [[ ! -f ~/.zshenv ]] || \
  ! diff ~/.zshenv ${_config_dir:a}/zsh/.zshenv 2>&1 > /dev/null; then
  source ${_config_dir:a}/zsh/.zshenv
fi
fpath=(${_config_dir:a}/zsh/.zsh/lib $fpath)
autoload -Uz -- ${_config_dir:a}/zsh/.zsh/lib/[^_]*(:t)

[[ -n ${help} ]] && bootstrap::usage
[[ -n ${dryrun} ]] && mode::set-dryrun && _stow_opts="-n"
[[ -n ${verbose} ]] && setopt localoptions verbose

zsh::eval "pushd ${_config_dir:a}"
if [[ -n ${unstow} ]]; then
  bootstrap::stow ${_stow_opts} -D
elif [[ -n ${stow} ]]; then
  bootstrap::stow ${_stow_opts}
else
  bootstrap::main
  zsh::eval "source ${_config_dir:a}/zsh/.zshenv"
  zsh::eval "source ${_config_dir:a}/zsh/.zshrc"
fi
zsh::eval "popd"

# vim: filetype=zsh sw=2 ts=2 sts=2 et tw=80 foldlevel=0 nospell
