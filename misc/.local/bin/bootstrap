#!/usr/bin/env zsh

function bootstrap::usage() {
  cat <<EOF
Usage: bootstrap [arguments]

Arguments:
  -h or --help          Print the usage information
  -n or --dryrun        Dryrun
  -u or --unstow        Revert the stow symlinks
  -s or --stage         Start from this bootstrap stage
  -v or --verbose       Verbose
  --log                 Write log to this file
  -y or --yes           Skip confirmation
  -l or --list          List stages
EOF
  exit 0
}
function bootstrap::list() {
  cat <<EOF
Stages:
  init          Install OS prerequisites
  brew          Install brew
  neobundle     Install neobundle
  stow          Install / Uninstall symlinks with stow
  brewinstall   Install softwares with brew
  misc          Wrap up bootstrap
EOF
  exit 0
}
function bootstrap::init() {
  # zsh::eval 'sudo -v'
  io::msg "Installing dependencies..."
  os::LINUX && zsh::eval "sudo apt-get install ${_y} build-essential curl \
    git m4 ruby texinfo libbz2-dev libcurl4-openssl-dev libexpat-dev htop\
    libncurses-dev zlib1g-dev xclip x11-xkb-utils xbindkeys xbindkeys-config \
    kupfer xvkbd xautomation urlview xdotool x11-apps terminator most markdown\
    haskell-platform cmake ctags jq stow git-extras grc trash-cli"
  # For xkb-data, symbol altwin need to be patched to fix the error where win
  # key is not correctly mapped, if the xkb-data version is too old.
  # diff the altwin symbol with system's (/usr/share/x11/xkb-data/symbol/altwin)
  # Update altwin of the system if needed, and then reload the xkb cache with
  # `sudo dpkg-reconfigure xkb-data`
  [[ -f ~/.vimrc ]] && zsh::eval 'mv ~/.vimrc ~/.vimrc.bak'
}
function bootstrap::brew() {
  if [[ "$OSTYPE" == 'darwin'* ]]; then
    declare -xg BREWVERSION='homebrew'
    declare -xg BREWHOME="$HOME/.$BREWVERSION"
  else
    declare -xg BREWVERSION='linuxbrew'
    declare -xg BREWHOME="$HOME/.$BREWVERSION"
  fi
  path=($BREWHOME/bin $BREWHOME/sbin $BREWHOME/opt/go/libexec/bin $path)

  if mode::dryrun || [[ ! -d "${BREWHOME}" ]]; then
    io::msg "Cloning ${BREWVERSION}..."
    zsh::eval "git clone \"https://github.com/Homebrew/${BREWVERSION}\" \
      \"${BREWHOME}\""
  fi

  zsh::eval "mkdir -p ~/.zlib"
  ln -s $BREWHOME/Library/Contributions/brew_zsh_completion.zsh ~/.zlib/_brew
  # brew tap / search etc sometimes complains about Non-HTTP proxy URI.
  # This is because of an issue with the ruby open-uri library. The workaround
  # is to set https_proxy to http_proxy (`export https_proxy=$http_proxy`).
  io::msg 'Tapping extra repositories...'
  zsh::eval 'brew tap paulhybryant/myformulae'
  zsh::eval 'brew tap homebrew/x11'
  zsh::eval 'brew tap homebrew/dupes'
  zsh::eval 'brew tap homebrew/completions'
  zsh::eval 'brew tap iveney/mocha'
  zsh::eval 'brew tap beeftornado/rmtree'
  zsh::eval 'brew tap peco/peco'

  zsh::eval 'brew install coreutils'
  if os::OSX; then
    zsh::eval 'brew install stow'
  fi
}
function bootstrap::neobundle() {
  # Install neobundle before stow so it won't uses the stowed vimrc
  io::msg 'Installing NeoBundle...'
  if mode::dryrun || [[ ! -d ~/.vim/bundle/neobundle.vim ]]; then
    # Another way to wrap long string is to use variable v, e.g.
    # v='str1'; v+='str2'; cmd $v
    zsh::eval "source <(curl -sL https://raw.githubusercontent.com/Shougo/`
      `neobundle.vim/master/bin/install.sh)"
    zsh::eval "~/.vim/bundle/neobundle.vim/bin/neoinstall vimproc.vim \
      neobundle-vim-recipes"
  fi
}
function bootstrap::stow() {
  io::msg 'Creating symlinks with stow...'
  zsh::eval "mkdir -p ~/.antigen/repos/ ~/.config/pip/ ~/.config/ranger/ \
    ~/.config/terminator/ ~/.ssh/assh.d ~/.tmux/plugins ~/.tmuxinator \
    ~/.vim/bundle ~/.local/bin"

  for module in misc tmux vim zsh; do
    [[ -d ${module} ]] && zsh::eval "stow -v ${_stow_opts} ${module} -t ~"
  done
  os::LINUX && [[ -d linux ]] && zsh::eval "stow -v ${_stow_opts} linux -t ~"
  os::OSX && [[ -d osx ]] && zsh::eval "stow -v ${_stow_opts} osx -t ~"
}
function bootstrap::brewinstall() {
  io::msg 'Installing softwares...'
  if os::LINUX; then
    zsh::eval 'brew install python --with-unicode-ucs4'
  elif os::OSX; then
    zsh::eval 'brew install python'
  fi
  zsh::eval 'brew install --HEAD paulhybryant/myformulae/powerline-shell'
  # zsh::eval 'brew install --with-gssapi --with-libssh2 --with-rtmpdump curl'
  zsh::eval "brew install https://raw.githubusercontent.com/moul/`
    `advanced-ssh-config/master/contrib/homebrew/assh.rb"
  zsh::eval "brew install brew-gem python3 tmux the_silver_searcher zsh \
    netcat stdman ranger fasd brew-rmtree fzf peco noti zsh-completions \
    gnu-sed brew-cask-completion"
  # xbindkeys makeself vimpager dos2unix findutils
  # zsh::eval 'brew install --force the_platinum_searcher'
  zsh::eval 'brew gem install tmuxinator'
  # zsh::eval 'brew gem install automux'
  zsh::eval 'brew install --HEAD vimdoc vroom'
  zsh::eval "pip install --upgrade powerline-status neovim \
    percol butterfly jedi pip-autoremove pipdeptree mdview"
  if os::LINUX; then
    zsh::eval "brew install --disable-nls --override-system-vi \
      --with-client-server --with-lua --with-luajit vim"
    # zsh::eval 'brew install --HEAD trash-cli'
    # zsh::eval 'pip install --upgrade trash-cli'
    zsh::eval 'cabal update && cabal install shellcheck'
    zsh::eval 'cabal install Cabal cabal-install'
  elif os::OSX; then
    io::msg 'Installing extra stuff for OSX...'
    zsh::eval 'brew tap caskroom/versions'
    zsh::eval "brew install --with-custom-icons --with-lua --with-luajit \
      --with-override-system-vim macvim"
    zsh::eval 'brew linkapps macvim'
    zsh::eval "brew install reattach-to-user-namespace \
      --with-wrap-launchctl --with-wrap-pbcopy-and-pbpaste"
    zsh::eval "brew install brew-cask clipper osxutils lsof gnu-trash \
      paulhybryant/myformulae/gnu-getopt yank textql shellcheck findutils"
    zsh::eval "brew cask install karabiner seil spectacle xquartz urlview \
      key-codes google-drive google-chrome git-annex haskell-platform most \
      htop markdown cmake ctags jq git-extras grc npm"
    # zsh::eval './osx/.osx/init.zsh'
  fi
}
function bootstrap::misc() {
  if os::OSX; then
    zsh::eval "http_proxy='' https_proxy='' \
      npm install -g urchin npm-update-outdated shelljs js-beautify"
  else
    zsh::eval "http_proxy='' https_proxy='' \
      sudo npm install -g urchin npm-update-outdated shelljs js-beautify"
  fi
  zsh::eval 'ln -sf ~/.xbindkeysrc.viminsert.scm ~/.xbindkeysrc.scm'
  if os::LINUX; then
    zsh::eval 'command rm ~/.ssh/assh.d/gmac.yml'
  else
    zsh::eval 'command rm ~/.ssh/assh.d/yuhuang.bej.yml'
  fi
  pushd ~/.ssh/
  zsh::eval "assh build > config"
  popd

  io::msg 'Installing powerline patched fonts'
  local _pfdir
  _pfdir="$(mktemp -d)"
  zsh::eval "git clone 'https://github.com/powerline/fonts.git' \"${_pfdir}\""
  zsh::eval "pushd ${_pfdir}"
  zsh::eval "./install.sh"
  zsh::eval "popd"
}
function bootstrap::main() {
  setopt localoptions nounset err_return

  local y
  zparseopts -D -K -M -E -- y=y -log:=log -stage:=stage

  if [[ "${stage[2]}" =~ "[0-9]" ]]; then
    case "${stage[2]}" in
      0)
        io::msg "=== Stage init... ==="
        bootstrap::init $y
        ;&
      1)
        io::msg "=== Stage brew... ==="
        bootstrap::brew
        ;&
      2)
        io::msg "=== Stage stow... ==="
        bootstrap::stow
        ;&
      3)
        io::msg "=== Stage neobundle... ==="
        bootstrap::neobundle
        ;&
      4)
        io::msg "=== Stage brewinstall... ==="
        bootstrap::brewinstall
        ;&
      5)
        io::msg "=== Stage misc... ==="
        bootstrap::misc
        ;&
    esac

    io::msg 'Bootstrap done!'
    io::msg "Install log: ${log[2]}"
    io::msg 'Reinitialize zsh...'
    zsh::eval 'exec zsh'
  else
    io::msg "=== Stage ${stage[2]}... ==="
    bootstrap::${stage[2]}

    io::msg "${stage[2]} done!"
    io::msg "Install log: ${log[2]}"
  fi
}

setopt LOCAL_OPTIONS
setopt localoptions err_return

local -a help dryrun unstow stow verbose list
zparseopts -D -K -M -E -- h=help n=dryrun u=unstow s:=stage v=verbose l=list\
  -help=help -dryrun=dryrun -unstow=unstow -stage:=stage -verbose=verbose \
  -log:=log -list=list y=yes -yes=yes

local _cfg_dir _logfile _y
local -a _stow_opts
_cfg_dir="${0:A:h}/../../../"

[[ -n ${help} ]] && bootstrap::usage
[[ -n ${list} ]] && bootstrap::list
[[ -n ${yes} ]] && _y='-y'
[[ -n ${dryrun} ]] && mode::set-dryrun
[[ -n ${verbose} ]] && mode::set-verbose 1
if [[ ${#log} -ge 2 ]]; then
  _logfile=${log[2]}
else
  _logfile=$(mktemp)
fi

zsh::eval "pushd ${_cfg_dir:a}"
if [[ -n ${unstow} ]]; then
  _stow_opts+=(-D)
fi
if [[ -n "${stage}" ]]; then
  _stage=${stage[2]}
else
  _stage=0
fi
bootstrap::main "$@" --stage ${_stage} --log ${_logfile} 2>&1 | tee ${_logfile}
zsh::eval 'popd'

# vim: filetype=zsh sw=2 ts=2 sts=2 et tw=80 foldlevel=0 nospell
