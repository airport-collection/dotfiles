#!/usr/bin/env zsh

function muxcfg::new-workdir-cmd() {
  if [[ -d ~/.google ]]; then
    printf "muxcfg::git5wrapper\n"
  else
    printf "git::new-workdir\n"
  fi
}
function muxcfg::usage() {
  cat <<EOF
Usage: muxcfg [arguments] [command] [project]

Arguments:
  -h or --help          Print the usage information
  -s or --src           Source git repo directory
  -t or --dst           Destination git repo directory
  -y or --noconfirm     Skip confirmation
  -v or --verbose       Verbose
  -n or --dryrun        Dryrun

Commands:
  start                 Create project repository, branch and config, start tmux session
  delete                Delete project repository, branch and config, kill tmux session
EOF
  exit 1
}
function muxcfg::start() {
  setopt localoptions err_return

  local -a src dst
  zparseopts -D -K -M -E -- s:=src t:=dst -src:=src -dst:=dst
  local _proj _cwd _src _dst _muxcfg _tmpcfg
  _proj="$1"
  [[ ${#src} -ge 2 ]] && _src="${src[2]}" || io::err "Missing required option -s or --src"
  [[ ${#dst} -ge 2 ]] && _dst="${dst[2]}/${_proj}" || io::err "Missing required option -t or --dst"
  _cwd="$(muxcfg::getcwd ${_dst} ${_proj})"

  local _muxcfg="$MUXCFGDIR/${_proj}.yml"
  if [[ -e "$_muxcfg" && -z ${opts[--noconfirm]+1} ]]; then
    if io::yes-or-no "$_muxcfg exists, overwrite"; then
      io::warn "$_muxcfg will be overwritten."
      _tmpcfg=$(mktemp)
      zsh::eval "sed -e \"s#\\\${SESSION}#${_proj}#\" -e \"s#\\\${ROOT}#${_cwd}#\" $MUXCFGDIR/project.yml.template > ${_tmpcfg}"
      zsh::eval "vimdiff $MUXCFGDIR/${_proj}.yml ${_tmpcfg}"
      io::yes-or-no "Continue"
      zsh::eval "mv ${_tmpcfg} $MUXCFGDIR/${_proj}.yml"
    else
      return 1
    fi
  else
    zsh::eval "sed -e \"s#\\\${SESSION}#${_proj}#\" -e \"s#\\\${ROOT}#${_cwd}#\" $MUXCFGDIR/project.yml.template > ${_muxcfg}"
  fi

  if [[ -d "${_dst}" ]]; then
    io::hl "[muxcfg] Directory ${_dst} exists."
    io::yes-or-no "Skip branching and start with existing copy"
  else
    zsh::eval "whence -f $(muxcfg::new-workdir-cmd) > /dev/null"
    zsh::eval "$(muxcfg::new-workdir-cmd) ${_src} ${_dst} ${_proj}"
  fi
  zsh::eval "mux start ${_proj}"
}
function muxcfg::delete() {
  setopt localoptions err_return

  local -a src dst
  zparseopts -D -K -M -E -- s:=src t:=dst -src:=src -dst:=dst
  local _proj _cwd _src _dst _muxcfg
  _proj="$1"
  [[ ${#src} -ge 2 ]] && _src="${src[2]}" || io::err "Missing required option -s or --src"
  [[ ${#dst} -ge 2 ]] && _dst="${dst[2]}/${_proj}" || io::err "Missing required option -t or --dst"
  _cwd="$(muxcfg::getcwd ${_dst} ${_proj})"

  if [[ -z ${opts[--noconfirm]+1} ]]; then
    io::yes-or-no "Delete project ${_proj}"
  fi

  if [[ -e "$MUXCFGDIR/${_proj}.yml" ]]; then
    io::vlog 1 "Deleting tmuxinator config $MUXCFGDIR/${_proj}.yml"
    zsh::eval "mux delete ${_proj}"
    cd "${_src}" || return 1
    io::vlog 1 "Deleting branch ${_proj}"
    zsh::eval "git branch -D ${_proj}"
    io::vlog 1 "Deleting directory ${_dst}"
    zsh::eval "rm -rf ${_dst}"
    io::vlog 1 "Killing tmux session ${_proj}"
    zsh::eval "tmux kill-session -t ${_proj}"
  else
    io::err "No project named ${_proj} exists."
  fi
}
function muxcfg::git5wrapper() {
  setopt localoptions err_return
  zsh::eval "git5 mirror $1 $2 --allow_existing_branch --branch=$3"
}
function muxcfg::main() {
  setopt localoptions err_return

  local -a help dryrun verbose src dst
  zparseopts -D -K -M -E -- h=help n=dryrun v=verbose s:=src t:=dst \
    -help=help -dryrun=dryrun -verbose=verbose -src:=src -dst:=dst

  [[ -n ${help} ]] && muxcfg::usage
  [[ -n ${dryrun} ]] && mode::set-dryrun
  [[ -n ${verbose} ]] && setopt localoptions verbose
  [[ ${#src} -lt 2 ]] && io::err "Missing required option -s or --src"
  [[ ${#dst} -lt 2 ]] && io::err "Missing required option -t or --dst"

  zsh::eval "whence tmuxinator > /dev/null"
  zsh::eval "mkdir -p "$MUXCFGDIR""

  local _subcmd _git_new_workdir_cmd
  _subcmd="$1"
  shift

  io::vlog 1 "[muxcfg] Subcommand: ${src[2]}"
  case "${_subcmd}" in
    start|delete )
      "muxcfg::${_subcmd}" -s "${src[2]}" -t "${dst[2]}" "$@"
      ;;
    * )
      io::hl "Unknown subcommand ${_subcmd}."
      muxcfg::usage
      ;;
  esac
  return 0
}
function muxcfg::getcwd() {
  if [[ -d ~/.google ]]; then
    printf "${1}/${2}/google3\n"
  else
    printf "${1}/${2}\n"
  fi
}

local _config_dir
_config_dir="${0:A:h}/../../../zsh/.antigen/repos/.zprezto/modules/custom/functions"
fpath=(${_config_dir:a} $fpath)
autoload -Uz -- ${_config_dir:a}/[^_]*(:t)

setopt LOCAL_OPTIONS
MUXCFGDIR="$HOME/.tmuxinator"
muxcfg::main "$@"

# vim: filetype=zsh sw=2 ts=2 sts=2 et tw=80 foldlevel=0 nospell
