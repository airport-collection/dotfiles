cppgotcha

• Type conversion. Do not use char as array subscript.
• Array initialization. Use c++ bracketed initialization.
• Use std:: for classes in standard library (e.g. std::string).
• Use uint in for loop to avoid warnings.
• When chars are involved, ask whether it is ASCII or Unicode.
• Use char str[] = “foo” instead of char* str = “foo”;
• strlen is in <cstring>
• How to use std::sort on char[]
• Use unordered_map instead of hash_map
• Use std::string in headers, include <string>
• std::array, std::sort on char* array, ARRAYSIZE, sizeof (1.3)
• Pay attention to potential overwrite of original data, if doing in-place manipulation.
• Remember to assign ‘\0’ to end of char*
• Use std::unique_ptr<char[]> for managing char* allocation.
• Use sprintf for converting to string.
• Remember to repeat some operation after loop ends (sometimes an extra op is needed).
• Syntax for representing and creating multi-dimensional array (for static, use std::array).
• C++ 11 fixed width integer type (defined in <cstdint>), int32_t etc.
• Find substring in c++ 11 (string.find() return std::size_t, check against std::string::npos), string.substr() to extract.
• std::regex_search and std::regex_match
• Remember to allocate one more space for ‘\0’
• Use std::unique_ptr<T[]> if the pointer is allocated for array.
• Use std::reference_wrapper<T> to have reference in STL containers.
• In DFS / BFS, the state Visiting is used to prevent adding repeated elements into the stack / queue.
• Initialize pointer members etc.
• Watch out when selecting the `mean` element (e.g. Question 4.3).
