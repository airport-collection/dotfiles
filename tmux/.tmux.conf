# vim: set sw=4 ts=4 sts=4 et tw=80 foldmarker={{,}} foldlevel=0 foldmethod=marker filetype=tmux nospell:

unbind-key -a
# Reset tmux keys to default (generated from tmux list-keys with no config loaded)
source-file ~/.tmux-default-keybindings.conf

# Plugins {{
    # List of plugins, supports `github_username/repo` or full git URLs
    # The plugin 'tpm' must be the first one.
    set -g @tpm_plugins "                   \
        tmux-plugins/tpm                    \
        tmux-plugins/tmux-battery           \
        tmux-plugins/tmux-continuum         \
        tmux-plugins/tmux-copycat           \
        tmux-plugins/tmux-logging           \
        tmux-plugins/tmux-online-status     \
        tmux-plugins/tmux-open              \
        tmux-plugins/tmux-resurrect         \
        tmux-plugins/tmux-sensible          \
        tmux-plugins/tmux-urlview           \
        tmux-plugins/tmux-yank              \
        "
    # Other plugins not installed, source: https://github.com/tmux-plugins
    # tmux-pain-control     - standard pane key-bindings for tmux
    # tmux-urlview          - Quickly open any url on your terminal window, depends on
    #                         urlview https://github.com/sigpipe/urlview
    #                         The debian version in linuxbrew won't built. Need
    #                         to update per this pull https://github.com/sigpipe/urlview/pull/8
    #                         Recommend to use the urlview from apt-get instead.
    # tmux-sidebar
    # tmux-sessionist
    # tmux-test
    # tmux-cpu
    # tmux-plugins/tmux-fpp
    # set-option -g @fpp-key 'f'
    # Other examples:
    # github_username/plugin_name    \
    # git@github.com/user/plugin     \
    # git@bitbucket.com/user/plugin  \

    set-option -g @resurrect-processes 'ssh "git log" grunt-wrapper tail'
    set-option -g @yank_selection 'primary'
    set-option -g @continuum-restore 'on'
    set-option -g @urlview-key 'u'
    run-shell ~/.tmux/plugins/tpm/tpm                                           # initializes TMUX plugin manager
# }}
# Options {{
    # Server options
    set-option -sg default-terminal "screen-256color-bce"                       # HOME and END key will have different keycode if this is not set
    set-option -sg escape-time 1
    set-option -sg exit-unattached off
    set-option -sg focus-events on
    set-option -sg set-clipboard on
    set-option -sg terminal-overrides 'screen*:XT:smcup@:rmcup@'                # Allow terminal to use its own scrolling, 'XT' is important here

    # Session options
    set-option -g base-index 1                                                  # start windows numbering at 1
    if-shell 'which -s reattach-to-user-namespace' 'set-option -g default-command "reattach-to-user-namespace -l /usr/bin/env zsh"' 'set-option -g default-command "/usr/bin/env zsh"'
    # set-option -g default-shell '/usr/bin/zsh'
    set-option -g destroy-unattached off
    set-option -g detach-on-destroy on
    set-option -g display-panes-time 800                                        # slightly longer pane indicators display time
    set-option -g mouse on                                                      # Allow selecting pane with mouse
    set-option -g prefix C-a
    set-option -g renumber-windows on                                           # renumber windows when a window is closed
    set-option -g repeat-time 0
    set-option -g set-titles on                                                 # set terminal title
    set-option -g set-titles-string '#S - #W - #{pane_current_command}'         # format for setting terminal title
    # set-option -g set-titles-string '#h ❐ #S ● #I #W'                         # format for setting terminal title
    set-option -g status-keys vi                                                # Force vi-style key bindings
    set-option -ga update-environment ' SSH_OS SSH_CLIENT SSH_AUTH_SOCK SSH_AGENT_PID'  # Inherit the env variable SSH_CLIENT, in addition to the defaults (note -a)
    set-option -g visual-activity on

    # Window options
    set-option -wg aggressive-resize on                                         # Resize pane when connected from different resolution
    set-option -wg automatic-rename off                                         # don't rename window to reflect current program
    set-option -wg clock-mode-style 24                                          # 24 hour clock
    set-option -wg mode-keys vi                                                 # Use vi style key bindings
    set-option -wg monitor-activity on
    set-option -wg pane-base-index 1                                            # make pane numbering consistent with windows
    set-option -wg wrap-search on
    set-option -wg xterm-keys on
# }}
# Key bindings {{
    # General {{
        unbind-key C-b                                                              # GNU-Screen compatible prefix
        bind-key C-a send-prefix
        bind-key -n C-b send-prefix                                             # Used to send prefix to nested tmux sessions
        bind-key e new-window -n '~/.tmux.conf' '${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'
        bind-key r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'
        bind-key n command-prompt 'rename-session %%'
        bind-key i command-prompt -p 'Insert window at:' 'new-window -a -t %1; swap-window -t -1'
        bind-key m command-prompt -p 'Move this window to:' 'swap-window -t %1'
        bind-key c new-window -c "#{pane_current_path}"
        bind-key < swap-window -t :-1                                           # swap current pane with the previous one
        bind-key > swap-window -t :+1                                           # swap current pane with the next one
        bind-key C-w resize-pane -Z
        bind-key C-o show-options -g
    # }}
    # Navigation {{
        bind-key - split-window -v -c "#{pane_current_path}"                    # split current window horizontally
        bind-key \ split-window -h -c "#{pane_current_path}"                    # split current window vertically
        # Smart pane switching with awareness of vim splits
        bind-key -n -r C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-h) || ([[ $(tmux list-panes | wc -l) -eq 1 ]] || tmux select-pane -L)"
        bind-key -n -r C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-j) || ([[ $(tmux list-panes | wc -l) -eq 1 ]] || tmux select-pane -D)"
        bind-key -n -r C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-k) || ([[ $(tmux list-panes | wc -l) -eq 1 ]] || tmux select-pane -U)"
        bind-key -n -r C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-l) || ([[ $(tmux list-panes | wc -l) -eq 1 ]] || tmux select-pane -R)"
        bind-key -r h select-pane -L
        bind-key -r j select-pane -D
        bind-key -r k select-pane -U
        bind-key -r l select-pane -R
        # bind-key -n -r C-Down run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-Down) || ([[ $(tmux list-panes | wc -l) -eq 1 ]] || tmux resize-pane -D 2)"
        # bind-key -n -r C-Left run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-Left) || ([[ $(tmux list-panes | wc -l) -eq 1 ]] || tmux resize-pane -L 2)"
        # bind-key -n -r C-Right run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-Right) || ([[ $(tmux list-panes | wc -l) -eq 1 ]] || tmux resize-pane -R 2)"
        # bind-key -n -r C-Up run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-Up) || ([[ $(tmux list-panes | wc -l) -eq 1 ]] || tmux resize-pane -U 2)"
        bind-key -n M-Right next-window
        bind-key -n M-Left previous-window
        bind-key -n M-l next-window
        bind-key -n M-h previous-window
        # bind-key -n M-Right select-window -t :.+
        # bind-key -n M-Right select-window -t :.-
        # bind-key BTab select-pane -t :.-
        # bind-key Tab select-pane -t :.+

        bind-key -n -r M-1 run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys M-1) || tmux select-window -t :1"
        bind-key -n -r M-2 run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys M-2) || tmux select-window -t :2"
        bind-key -n -r M-3 run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys M-3) || tmux select-window -t :3"
        bind-key -n -r M-4 run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys M-4) || tmux select-window -t :4"
        bind-key -n -r M-5 run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys M-5) || tmux select-window -t :5"
        bind-key -n -r M-6 run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys M-6) || tmux select-window -t :6"
        bind-key -n -r M-7 run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys M-7) || tmux select-window -t :7"
        bind-key -n -r M-8 run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys M-8) || tmux select-window -t :8"
        bind-key -n -r M-9 run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys M-9) || tmux select-window -t :9"
    # }}
    # Copy Mode {{
        bind-key -t vi-copy C-d page-down
        bind-key -t vi-copy C-u page-up
        # bind-key -t vi-copy Escape cancel
        bind-key -t vi-copy v begin-selection
        bind-key -t vi-copy y copy-pipe "tmux save-buffer - | xclip -selection clipboard -i"
        # if-shell 'which -s reattach-to-user-namespace' 'bind-key -t vi-copy y copy-pipe "tmux save-buffer - | reattach-to-user-namespace pbcopy"' 'bind-key -t vi-copy y copy-pipe "tmux save-buffer - | xclip -selection clipboard -i"'
        bind-key Enter copy-mode                                                    # enter copy mode
        bind-key P choose-buffer                                                    # choose which buffer to paste from
        bind-key b list-buffers                                                     # list paster buffers
        bind-key p paste-buffer                                                     # paste from the top paste buffer
        bind-key / list-keys -t vi-copy

        # if-shell 'test "$SSH_OS" == "Darwin"' 'bind-key -t vi-copy y copy-pipe "nc -c localhost 8377"'
        # if-shell 'test "$SSH_OS" != "Darwin" && which -s xclip' 'bind-key -t vi-copy y copy-pipe "tr -d \'\n\' | xclip -selection clipboard -i"'
        # if-shell 'which -s reattach-to-user-namespace' 'bind-key -t vi-copy t copy-pipe "tr -d \'\n\' | tmux save-buffer - | reattach-to-user-namespace pbcopy"'
    # }}
    source-file ~/.tmux-statusline-colors.conf
    # source-file "$HOME/.$BREWVERSION/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf"
    # if-shell "[[ `tmux -V` == *1.8 ]]" \
        # "source-file $HOME/.$BREWVERSION/lib/python2.7/site-packages/powerline/bindings/tmux/powerline_tmux_1.8.conf"
    # if-shell "[[ `tmux -V` == *1.9 ]] " \
        # "source-file $HOME/.$BREWVERSION/lib/python2.7/site-packages/powerline/bindings/tmux/powerline_tmux_1.8_plus.conf" \
        # "source-file $HOME/.$BREWVERSION/lib/python2.7/site-packages/powerline/bindings/tmux/powerline_tmux_1.9_plus.conf"
# }}
if-shell '[[ $(tmux list-sessions | wc -l ) -eq 0 ]]' 'run-shell $HOME/.tmux/plugins/tmux-resurrect/scripts/restore.sh'
