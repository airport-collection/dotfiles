" vim: set sw=2 ts=2 sts=2 et tw=78 foldlevel=0 foldmethod=marker filetype=vim nospell:

NeoBundle 'Chiel92/vim-autoformat'
NeoBundle 'aperezdc/vim-template'
NeoBundle 'google/vim-glaive'
NeoBundle 'google/vim-maktaba'
NeoBundle 'google/vim-codefmt', { 'depends' : 'google/vim-codefmtlib' } " Code formating plugin from google
NeoBundle 'vim-jp/cpp-vim'
let g:use_ycm = 1

if empty($NVIM) && !exists("g:use_ycm")
  " neocomplete {{{
    NeoBundle 'Shougo/neocomplete.vim'
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
      \   'default' : '',
      \   'vimshell' : $HOME.'/.vimshell_hist',
      \   'scheme' : $HOME.'/.gosh_completions'
      \ }

      " Define keyword.
      if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
      endif
      let g:neocomplete#keyword_patterns['default'] = '\h\w*'

      " Plugin key-mappings.
      " inoremap <expr><C-g>     neocomplete#undo_completion()
      " inoremap <expr><C-l>     neocomplete#complete_common_string()

      " Recommended key-mappings.
      " <CR>: close popup and save indent.
      inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
      function! s:my_cr_function()
        return neocomplete#close_popup() . "\<CR>"
        " For no inserting <CR> key.
        "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
      endfunction
      " <TAB>: completion.
      inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
      " <C-h>, <BS>: close popup and delete backword char.
      inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
      inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
      inoremap <expr><C-y>  neocomplete#close_popup()
      inoremap <expr><C-e>  neocomplete#cancel_popup()
      " Close popup by <Space>.
      "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

      " For cursor moving in insert mode(Not recommended)
      "inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
      "inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
      "inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
      "inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
      " Or set this.
      "let g:neocomplete#enable_cursor_hold_i = 1
      " Or set this.
      "let g:neocomplete#enable_insert_char_pre = 1

      " AutoComplPop like behavior.
      "let g:neocomplete#enable_auto_select = 1

      " Shell like behavior(not recommended).
      "set completeopt+=longest
      "let g:neocomplete#enable_auto_select = 1
      "let g:neocomplete#disable_auto_complete = 1
      "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

      " Enable omni completion.
      autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
      autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
      autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
      autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
      autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

      " Enable heavy omni completion.
      if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
      endif
      "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
      "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
      "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

      " For perlomni.vim setting.
      " https://github.com/c9s/perlomni.vim
      let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
  " }}}
elseif exists("g:use_ycm")
  " YouCompleteMe {{{
  NeoBundle 'Valloric/YouCompleteMe', {
      \ 'build' : {
      \     'mac' : './install.sh --clang-completer --system-libclang --omnisharp-completer',
      \     'unix' : './install.sh --clang-completer --system-libclang --omnisharp-completer',
      \     'windows' : './install.sh --clang-completer --system-libclang --omnisharp-completer',
      \     'cygwin' : './install.sh --clang-completer --system-libclang --omnisharp-completer'
      \    }
      \ }
  nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
  " nnoremap <C-o> :YcmForceCompileAndDiagnostics <CR>
  let g:ycm_filetype_whitelist = { 'c': 1, 'cpp': 1, 'python': 1 }
  let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
  let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
  let g:ycm_register_as_syntastic_checker = 1                             " default 1
  let g:Show_diagnostics_ui = 1                                           " default 1
  "will put icons in Vim's gutter on lines that have a diagnostic set.
  "Turning this off will also turn off the YcmErrorLine and YcmWarningLine highlighting
  let g:ycm_enable_diagnostic_signs = 1
  let g:ycm_enable_diagnostic_highlighting = 0
  let g:ycm_always_populate_location_list = 1                             " default 0
  let g:ycm_open_loclist_on_ycm_diags = 1                                 " default 1
  let g:ycm_complete_in_strings = 1                                       " default 1
  let g:ycm_collect_identifiers_from_tags_files = 0                       " default 0
  let g:ycm_path_to_python_interpreter = ''                               " default ''
  let g:ycm_confirm_extra_conf = 1
  let g:ycm_goto_buffer_command = 'same-buffer'                           " [ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab' ]
  let g:ycm_filetype_whitelist = { '*': 1 }
  let g:ycm_key_invoke_completion = '<C-Space>'
  let g:ycm_collect_identifiers_from_tags_files = 1                       " enable completion from tags
  let g:ycm_server_use_vim_stdout = 0                                     " default 0 (logging to console)
  let g:ycm_server_log_level = 'info'                                     " default info
  let g:ycm_server_keep_logfiles = 10                                     " keep log files
  " }}}
else
  NeoBundle 'Shougo/neocomplcache.vim'
endif

" Remove trailing whitespaces and ^M chars {{{
function! <SID>ToggleStripingTrailingWhitespace()
  if !exists('g:keep_trailing_whitespace') || g:keep_trailing_whitespace == 0
    let g:keep_trailing_whitespace = 1
  else
    let g:keep_trailing_whitespace = 0
  endif
endfunction
nnoremap <leader>tws :call <SID>ToggleStripingTrailingWhitespace()<CR>

autocmd FileType * autocmd BufWritePre <buffer> call <SID>StripTrailingWhitespace()
function! <SID>StripTrailingWhitespace()
  if !exists('g:keep_trailing_whitespace') || g:keep_trailing_whitespace == 0
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    %s/\s\+$//e
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
  endif
endfunction
" }}}
