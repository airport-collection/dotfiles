" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={{,}} foldlevel=0 foldmethod=marker nospell:

" Unsed {{
    " NeoBundle 'akesling/ondemandhighlight'
    " NeoBundle 'jeetsukumaran/vim-buffergator'                             " Use vim-airline for buffers
    " NeoBundle 'mhinz/vim-startify'                                        " Don't need a fancy start page in vim
    " NeoBundle 'TyeMcQueen/vim-merge-windows'
    " NeoBundle 'nathanaelkane/vim-indent-guides'
    " NeoBundle 'bling/vim-bufferline'                                      " Seems to be redundant with tabline in vim-airline
    " NeoBundle 'vim-scripts/ReplaceWithRegister'                           " Replace motion text with content of a register
    " NeoBundle 'sjl/gundo.vim'
    " NeoBundle 'tpope/vim-eunuch'
    " NeoBundle 'vim-scripts/TagHighlight'
    " NeoBundle 'matchit.zip'                                               " Included in vim distribution
    " NeoBundle 'paulhybryant/vimoutliner'

    " NeoBundle 'basepi/vim-conque'                                         " Conque term (terminal in vim)
    " function! MyConqueStartup(term)
        " setlocal nospell
    " endfunction
    " call conque_term#register_function('after_startup', 'MyConqueStartup')

    " NeoBundle 'FelikZ/ctrlp-py-matcher'
    " NeoBundle 'kien/ctrlp.vim'
    " NeoBundle 'tacahiroy/ctrlp-funky'
    " NeoBundle 'jasoncodes/ctrlp-modified.vim'
    " let g:ctrlp_by_filename = 1                                             " Default to filename searches - so that appctrl will find application controller
    " let g:ctrlp_follow_symlinks = 1
    " let g:ctrlp_show_hidden = 1
    " let g:ctrlp_switch_buffer = 0                                           " Don't jump to already open window.
    " let g:ctrlp_working_path_mode = 'cr'
    " let g:ctrop_regexp = 1
    " if exists("g:ctrlp_user_command")
        " unlet g:ctrlp_user_command
    " endif
    " if executable('ag')
        " let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
            " \ --ignore .git
            " \ --ignore .svn
            " \ --ignore .hg
            " \ --ignore .DS_Store
            " \ --ignore "**/*.pyc"
            " \ --ignore .git5_specs
            " \ --ignore review
            " \ -g ""'
        " let g:ctrlp_use_caching = 0
    " endif
    " let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

    " " Additional mapping for buffer search
    " nnoremap <silent> ,b :CtrlPBuffer<CR>

    " " Cmd-Shift-P to clear the cache
    " nnoremap <silent> <D-P> :ClearCtrlPCache<cr>

    " " Open CtrlP starting from a particular path, making it much
    " " more likely to find the correct thing first. mnemonic 'jump to [something]'
    " " map ,jl :CtrlP lib<CR>

    " set comments=sl:/*,mb:*,elx:*/                    " auto format comment blocks
    " Several alternatives of always switching to the current file directory
    " set autochdir                                     " Automatically change current working dir
    " autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
    " autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
" }}

" if WINDOWS()
    " let g:ctrlp_custom_ignore = {
        " \ 'dir':  '\.git$\|\.hg$\|\.svn\|\.git5_specs$\|review$',
        " \ 'file': '\.exe$\|\.so$\|\.dll$',
        " \ }
" endif

" let g:ctrlp_custom_ignore = {
    " \ 'dir':  '\.git$\|\.hg$\|\.svn\|\.git5_specs$\|review$',
    " \ 'file': '\.exe$\|\.so$\|\.dll$',
    " \ 'link': 'blaze-bin\|blaze-genfiles\|blaze-google3\|blaze-out\|blaze-testlogs\|READONLY$',
    " \ }

" " Provided by CornadIrwin/vim-bracketed-paste
" " Automatically handle paste mode toggle when pasting {{
" function! WrapForTmux(s)
    " if !exists('$TMUX')
        " return a:s
    " endif

    " let tmux_start = "\<Esc>Ptmux;"
    " let tmux_end = "\<Esc>\\"

    " return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
" endfunction

" let &t_SI .= WrapForTmux("\<Esc>[?2004h")
" let &t_EI .= WrapForTmux("\<Esc>[?2004l")

" function! XTermPasteBegin()
    " set pastetoggle=<Esc>[201~
    " set paste
    " return ""
" endfunction

" inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
" " }}

" @Deprecated {{
    " This plugin actually makes press up / down in search mode adding a
    " new line and breaks the functionality.
    " Plugin 'vim-scripts/SearchComplete'

    " Increase the number of a selected block {{
    " Deprecated by Dr. Chip's Visual Incrementing plugin
    " function! <SID>Incr()
        " let l:a = line('.') - line("'<")
        " let l:c = virtcol("'<")
        " if l:a > 0
            " Decho 'normal! '.l:c.'|'.l:a."\<C-a>"
            " execute 'normal! '.l:c.'|'.l:a."\<C-a>"
        " endif
        " normal `<
    " endfunction
    " vnoremap <C-y> :call <SID>Incr()<CR>
    " }}

    " vim-expand-region is a better one for this purpose
    " wildfire {{
        " Plugin 'gcmt/wildfire.vim'
        " vmap <BS> <Plug>(wildfire-water)
        " map <SPACE> <Plug>(wildfire-fuel)
        " let g:wildfire_objects = {
            " \ "*" : ["i'", 'i"', "i)", "i]", "i}"]
        " \ }

        " " As you can see, to add additional mappings we have to follow a simple convention
        " map <ENTER> <Plug>(wildfire-fuel:tags)
        " let g:wildfire_objects_tags = {
            " \ "html,xml" : ["at", "it"],
        " \ }
    " }}
" }}
