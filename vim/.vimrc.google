" vim: set sw=2 ts=2 sts=2 et tw=78 foldlevel=0 foldmethod=marker filetype=vim nospell:

if filereadable(expand("~/.vimdevel"))
  let g:vimdev = readfile(expand("~/.vimdevel"), '', 1)
  execute 'echom "Running in vim dev mode."'
  execute 'source ' . g:vimdev
  Glug vim_dev
  Glug googler vim_dev plugin[autocmds]=1
else
  source /usr/share/vim/google/google.vim
endif

let g:g4_autoedit_noprompt = 1

call glug#Package('magic')
Glug blazebuild-fold
Glug blazedeps
Glug clang-format
Glug codefmt-google auto_filetypes+=blazebuild
Glug critique
Glug fileswitch
Glug ft-cpp
Glug ft-proto
Glug ft-python
Glug g4
Glug git5
Glug google-filetypes
Glug googlepaths
Glug googler plugin[autocmds]=0
Glug googlestyle
Glug piper plugin[mappings]=''
Glug refactorer
Glug syntastic-google
Glug ultisnips-google

Glug blaze plugin[mappings]='<leader>b'
nnoremap <leader>btm :call blaze#TestCurrentMethod()<CR>

Glug youcompleteme-google
nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
" nnoremap <C-o> :YcmForceCompileAndDiagnostics <CR>
let g:ycm_filetype_whitelist = { 'c': 1, 'cpp': 1, 'python': 1 }
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:ycm_register_as_syntastic_checker = 1                             " default 1
let g:Show_diagnostics_ui = 1                                           " default 1
"will put icons in Vim's gutter on lines that have a diagnostic set.
"Turning this off will also turn off the YcmErrorLine and YcmWarningLine highlighting
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_always_populate_location_list = 1                             " default 0
let g:ycm_open_loclist_on_ycm_diags = 1                                 " default 1
let g:ycm_complete_in_strings = 1                                       " default 1
let g:ycm_collect_identifiers_from_tags_files = 0                       " default 0
let g:ycm_path_to_python_interpreter = ''                               " default ''
let g:ycm_server_use_vim_stdout = 0                                     " default 0 (logging to console)
let g:ycm_server_log_level = 'info'                                     " default info
let g:ycm_confirm_extra_conf = 1
let g:ycm_goto_buffer_command = 'same-buffer'                           " [ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab' ]
let g:ycm_filetype_whitelist = { '*': 1 }
let g:ycm_key_invoke_completion = '<C-Space>'
let g:ycm_collect_identifiers_from_tags_files = 1                       " enable completion from tags

Glug outline-window
nnoremap <leader>ow :exe "QuickOutline " . expand("<cword>")<CR>
" nnoremap <leader>ow :QuickOutline <C-R><C-W><CR>

Glug relatedfiles plugin[mappings]='<leader>rf'
nnoremap <leader>gb :FileswitchEditBUILD<CR>
nnoremap <leader>gh :FileswitchEditH<CR>
nnoremap <leader>gc :FileswitchEditCC<CR>
nnoremap <leader>gt :FileswitchEditTest<CR>

" ~ means toggle
Glug whitespace autotrimtrailing highlight
nnoremap <leader>tws :Glaive whitespace ~autotrimtrailing<CR>

" Depends on vim-fugitive
function! DoGit5Diff()
  let s:revision = system('git5 status --base')
  exe "Gdiff " . s:revision
endfunction
command! G5diff call DoGit5Diff()

autocmd BufRead,BufNewFile *.tsl,*.gsql syntax on | set filetype=sql | setlocal nospell | silent! vnoremap <buffer> <leader>= :SQLUFormatStmts<CR>
