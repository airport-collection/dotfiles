#!/usr/bin/env zsh

source "${__MYCONFIGS__}/shlib/base.zsh"
source "${__MYCONFIGS__}/shlib/git.zsh"

function util::muxcfg_usage() {
  cat <<EOF
Usage: muxcfg [arguments] [command] [project]

Arguments:
  -h or --help          Print the usage information
  -u or --usage         Print the usage information
  -v or --verbose       Print additional information
  -n or --dryrun        Only print the command to be executed
  -y or --noconfirm     Skip confirmation

Commands:
  start                 Create project repository, branch and config, start tmux session
  delete                Delete project repository, branch and config, kill tmux session
EOF
  return 1
}

function mirror_and_start() {
  local _muxproj_="$1"
  local _muxconfig_="$2"
  local _startcwd_="$3"
  if [[ -d "$GIT_WORKING_DIR_ROOT/$_muxproj_" ]]; then
    echo "Error: $GIT_WORKING_DIR_ROOT/$_muxproj_ exists!"
    if [[ $DRYRUN == false ]]; then
      return
    fi
  fi
  if [[ $DRYRUN == true ]]; then
    echo "sed -e \"s#\${SESSION}#$_muxproj_#\" -e \"s#\${ROOT}#$_startcwd_#\" \"$MUXDIR/project.yml.template\" > \"$_muxconfig_\""
    echo "$GIT_NEW_WORKDIR_CMD $GIT_REPO $GIT_WORKING_DIR_ROOT/$_muxproj_ $_muxproj_"
    echo "mux start \"$_muxproj_\""
  else
    sed -e "s#\${SESSION}#$_muxproj_#" -e "s#\${ROOT}#$_startcwd_#" "$MUXDIR/project.yml.template" > "$_muxconfig_"
    $GIT_NEW_WORKDIR_CMD "$GIT_REPO" "$GIT_WORKING_DIR_ROOT/$_muxproj_" "$_muxproj_"
    mux start "$_muxproj_"
  fi
}

function start() {
  local _muxproj_="$1"
  local _muxconfig_="$MUXDIR/$_muxproj_.yml"
  START_CWD=${START_CWD//__MUXPROJ__/$_muxproj_}
  if [ -e "$_muxconfig_" ];
  then
    if io::yes_or_no "$_muxconfig_ exists, overwrite (y/n)? [n] "; then
      echo "\n$_muxconfig_ will be overwritten."
      mirror_and_start "$_muxproj_" "$_muxconfig_" "$START_CWD"
    else
      sed -e "s#\${SESSION}#$_muxproj_#" "$MUXDIR/project.yml.template"
    fi
  else
    mirror_and_start "$_muxproj_" "$_muxconfig_" "$START_CWD"
  fi
}

function delete() {
  local _muxproj_="$1"
  if [[ -e "$MUXDIR/$_muxproj_.yml" &&
    \ io::yes_or_no "Delete project $_muxproj_ (y/n)? [n] "; then
      run "mux delete $_muxproj_" "Deleting tmuxinator config $MUXDIR/$_muxproj_.yml"
      run "cd $GIT_REPO" "Chdir to $GIT_REPO"
      run "git branch -D $_muxproj_" "Deleting branch $_muxproj_"
      run "rm -rf $GIT_WORKING_DIR_ROOT/$_muxproj_" "Deleting directory $GIT_WORKING_DIR_ROOT/$_muxproj_"
      run "tmux kill-session -t $_muxproj_" "Killing tmux session $_muxproj_"
    fi
  else
    echo "No project named $_muxproj_ exists."
  fi
}

function util::_git5wrapper() {
  git5 mirror $1 $2 --allow_existing_branch --branch=$3
}

function util::muxcfg() {
  setopt localoptions nounset err_return
  base::exists tmuxinator
  case "$1" in
    start|delete )
      $1 "$2"
      ;;
    * )
      echo "Invalid command: $1" >&2
      util::muxcfg_usage
  esac
  if [[ -e "$HOME/.google" ]]; then
    git_working_dir_root=$HOME/Projects
    git_repo=$HOME/Src
    git_new_workdir_cmd="util::_git5wrapper"
    start_cwd=$git_working_dir_root/__MUXPROJ__/google3
  else
    git_working_dir_root=$HOME/Workspace
    git_repo=$HOME/gitrepo
    git_new_workdir_cmd="git::new_workdir"
    start_cwd=$git_working_dir_root/__MUXPROJ__
    base::exists $git_new_workdir_cmd
  fi
  MUXDIR=$HOME/.tmuxinator
}

DRYRUN=false
CONFIRM=true


# NOTE: This requires GNU getopt.  On Mac OS X and FreeBSD, you have to install
# this separately. On Mac OS X, install it with "port install getopt".
TEMP=`getopt -o vnyhu --long verbose,dryrun,noconfirm,help,usage -n 'muxcfg' -- "$@"`
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true; do
  case "$1" in
    -h | -u | --help | --usage ) usage; exit 0 ;;
    -v | --verbose ) VERBOSE=true; shift ;;
    -n | --dryrun ) DRYRUN=true; shift ;;
    -y | --noconfirm ) CONFIRM=false; shift ;;
    -- ) shift; break ;;
    * ) echo "Unknown option $FLAG"; usage; exit 1 ;;
  esac
done

