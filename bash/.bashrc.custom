# vim: set sw=2 ts=2 sts=2 et tw=78 foldlevel=0 foldmethod=marker nospell:

[[ -n "$BASH" && -z "$__BASH_CUSTOM__" ]] && readonly __BASH_CUSTOM__=$(realpath "${BASH_SOURCE}")

[[ "$OSTYPE" != "darwin"* ]] && __BASH_CUSTOM_NEW_VERSION__=$(date -r "$__BASH_CUSTOM__" +%s)
[[ "$OSTYPE" == "darwin"* ]] && __BASH_CUSTOM_NEW_VERSION__=$(stat -f '%m' "$__BASH_CUSTOM__")
[[ -n "$__BASH_CUSTOM_VERSION__" && "$__BASH_CUSTOM_VERSION__" -eq "$__BASH_CUSTOM_NEW_VERSION__" ]] && return

__BASH_CUSTOM_VERSION__="$__BASH_CUSTOM_NEW_VERSION__"
echo "$__BASH_CUSTOM__ sourced, timestamp $__BASH_CUSTOM_NEW_VERSION__"

# General {{{

[[ "$OSTYPE" == "darwin"* ]] && export __SHLIB__=$(dirname $(dirname $(readlink "$HOME/.bashrc.custom")))/shlib
[[ "$OSTYPE" != "darwin"* ]] && export __SHLIB__=$(dirname $(dirname $(readlink -f "$HOME/.bashrc.custom")))/shlib
export PATH=$HOME/.local/bin:$PATH

source "$__SHLIB__/common.sh"

if [ -f "$HOME/.bashrc.platform" ]; then
    source ~/.bashrc.platform
fi

# Turn on vi mode by default.
set -o vi

# Expand $VAR when pressing tab for completion
shopt -s direxpand

# Allow pass Ctrl + C(Q) for terminator
stty ixany
stty ixoff -ixon
stty stop undef
stty start undef

# Don't enable the following line, it will screw up HOME and END key in tmux
# If it is really need for program foo, create an alias like this
# alias foo='TERM=xterm-256color foo'
# export TERM=xterm-256color
export GREP_OPTIONS='--color=auto'

# autocutsel -selection PRIMARY -fork

# Put in .inputrc
# bind '"\e[A": history-search-backward' '"\e[B": history-search-forward'

# Share history across terminals
function _update_ps1() {
  export PS1="$(powerline-shell.py --colorize-hostname $? 2> /dev/null)"
}
export PROMPT_COMMAND="_update_ps1; history -a; history -c; history -r;"

# }}}

# Aliases {{{

# tmux
alias tmux='TERM=screen-256color-bce tmux -2'
alias tls="tmux ls"
function ta() {
  local setenv="/tmp/set-tmux-env.sh"
  > "$setenv"
  for var in SSH_OS SSH_CLIENT DISPLAY;
  do
    local value=
    eval value=\$$var
    echo "export $var=\"$value\"" >> "$setenv"
    tmux set-environment -t "$1" $var "${!var}"
  done
  for window in $(tmux list-windows -t "$1" -F "#W");
  do
    for pane_id_command in $(tmux list-panes -t "$1:$window" -F "#P:#{pane_current_command}");
    do
      local id=${pane_id_command%%:*}
      local cmd=${pane_id_command##*:}
      if [[ $cmd != "bash" && $cmd != "blaze64" ]]; then
        tmux send-keys -t "$1:$window" C-z
        sleep 0.2
      fi
      tmux send-keys -t "$1:$window.$id" source \ $setenv ENTER
      if [[ $cmd != "bash" && $cmd != "blaze64" ]]; then
        tmux send-keys -t "$1:$window.$id" fg ENTER
      fi
    done
  done
  tmux attach -t "$1"
}
function ts() {
  tmux switch-client -t "$1"
}
function tk() {
  tmux kill-session -t "$1"
}
function _tmux_sessions() {
  local cur
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}

  COMPREPLY=( $( compgen -W "$( command tmux ls -F \"#{session_name}\" )" -- $cur ) )
}
complete -F _tmux_sessions -o default ta
complete -F _tmux_sessions -o default ts
complete -F _tmux_sessions -o default tk

# vi
# alias vi="vi -p"
# alias vim="vim -p"

# misc
# Print function definition
alias pfd="declare -f"
alias rm="rm -v"

# }}}

# functions {{{

function ll() {
  ls -lh "$@"
  ls -l "$@" | awk -f "$HOME/.utils/lldu.awk"
}

function la() {
  ls -alF "$@"
  ls -alF "$@" | awk -f "$HOME/.utils/lldu.awk"
}

function myssh() {
  ssh "$@" -t "export SSH_OS=\"`uname`\"; bash"
}

function histgrep() {
  tac ${HISTFILE:-~/.bash_history} | grep -m 1 "$@"
}

# }}}

# Start ssh agent if needed {{{

# Check to see if SSH Agent is already running
agent_pid="$(ps -ef | grep "ssh-agent" | grep -v "grep" | awk '{print($2)}')"

# If the agent is not running (pid is zero length string)
if [[ -z "$agent_pid" ]]; then
    # Start up SSH Agent

    # this seems to be the proper method as opposed to `exec ssh-agent bash`
    eval "$(ssh-agent)"
fi
# }}}

# Additional configurations to load {{{

# Force control sequences such as <c-s> and <c-q> to vim
stty -ixon > /dev/null 2>/dev/null

if [ -f "$HOME/.bashrc.local" ]; then
  . ~/.bashrc.local
fi

# RVM
if [ -f ~/.rvm/scripts/rvm ]; then
  source ~/.rvm/scripts/rvm
fi

# Tmuxinator
export EDITOR='vim'
if [ -e "$HOME/.tmuxinator.bash" ]; then
  source ~/.tmuxinator.bash
fi

# Use vimpager to replace less, which is used to view man page
# export PAGER=/usr/local/bin/vimpager
# alias less=$PAGER
# alias zless=$PAGER

# The following won't have effect unless less is used (instead of vimpager)
# http://superuser.com/questions/452034/bash-colorized-man-page
#
#   L E S S   C O L O R S   F O R   M A N   P A G E S
#

# CHANGE FIRST NUMBER PAIR FOR COMMAND AND FLAG COLOR
# currently 0;33 a.k.a. brown, which is dark yellow for me
   export LESS_TERMCAP_md=$'\E[0;33;5;74m'  # begin bold

# CHANGE FIRST NUMBER PAIR FOR PARAMETER COLOR
# currently 0;36 a.k.a. cyan
   export LESS_TERMCAP_us=$'\E[0;36;5;146m' # begin underline

# don't change anything here
   export LESS_TERMCAP_mb=$'\E[1;31m'       # begin blinking
   export LESS_TERMCAP_me=$'\E[0m'           # end mode
   export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
   export LESS_TERMCAP_so=$'\E[38;5;246m'    # begin standout-mode - info box
   export LESS_TERMCAP_ue=$'\E[0m'           # end underline

#########################################
# Colorcodes:
# Black       0;30     Dark Gray     1;30
# Red         0;31     Light Red     1;31
# Green       0;32     Light Green   1;32
# Brown       0;33     Yellow        1;33
# Blue        0;34     Light Blue    1;34
# Purple      0;35     Light Purple  1;35
# Cyan        0;36     Light Cyan    1;36
# Light Gray  0;37     White         1;37
#########################################

# }}}
